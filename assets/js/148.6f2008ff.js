(window.webpackJsonp=window.webpackJsonp||[]).push([[148],{423:function(e,t,a){"use strict";a.r(t);var v=a(14),n=Object(v.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"compiler-and-virtual-machine"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#compiler-and-virtual-machine"}},[e._v("#")]),e._v(" 编译器和虚拟机 ")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("- [源代码存储和编译](#source-code-storage-and-compilation)\n- [虚拟机结构](#virtual-machine-structures)\n    - [VM结构](#vm-structure)\n    - [块结构](#block-structure)\n    - [ObjInfo结构](#objinfo-structure)\n        - [ContractInfo结构](#contractinfo-structure)\n            - [FieldInfo结构](#fieldinfo-structure)\n        - [FuncInfo结构](#funcinfo-structure)\n            - [FuncName结构](#funcname-structure)\n        - [ExtFuncInfo结构](#extfuncinfo-structure)\n        - [VarInfo结构](#varinfo-structure)\n        - [ObjExtend值](#objextend-value)\n- [虚拟机指令](#virtual-machine-commands)\n    - [ByteCode结构](#bytecode-structure)\n    - [指令标识符](#command-identifiers)\n    - [堆栈操作指令](#stack-operation-commands)\n    - [Runtime结构](#runtime-structure)\n        - [blockStack结构](#blockstack-structure)\n    - [RunCode函数](#runcode-function)\n    - [VM的其他函数操作](#other-functions-for-operations-with-vm)\n- [编译器](#compiler)\n- [词法分析器](#lexical-analyzer)\n    - [lextable/lextable.go](#lextable-lextable-go)\n    - [lex.go](#lex-go)\n- [needle 语言](#needle-language)\n    - [词法](#lexemes)\n    - [类型](#types)\n    - [表达式](#expressions)\n    - [范围](#scope)\n    - [合约执行](#contract-execution)\n    - [巴科斯范式Backus--Naur Form (BNF)](#backus-naur-form-bnf)\n")])])]),e._v(" "),t("p",[e._v("本节涉及程序编译和虚拟机中 needle 语言的操作。")]),e._v(" "),t("h2",{attrs:{id:"source-code-storage-and-compilation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#source-code-storage-and-compilation"}},[e._v("#")]),e._v(" 源代码存储和编译 ")]),e._v(" "),t("p",[e._v("合约和功能用Golang语言编写，并存储在生态系统的合约表。")]),e._v(" "),t("p",[e._v("执行合约时，将从数据库中读取其源代码并将其编译为字节码。")]),e._v(" "),t("p",[e._v("合约更改后，其源代码将更新并保存在数据库中。然后编译该源代码，导致相应的虚拟机字节码也被改变。")]),e._v(" "),t("p",[e._v("字节码在任何地方都没有物理保存，因此当再次执行程序时，会重新编译源代码。")]),e._v(" "),t("p",[e._v("所有生态系统的合约表中描述的整个源代码都严格按顺序编译到一个虚拟机中，虚拟机的状态在所有节点上都相同。")]),e._v(" "),t("p",[e._v("调用合约时，虚拟机不会以任何方式更改其状态。执行任何合约或调用函数都发生在每个外部调用时创建的单独运行堆栈上。")]),e._v(" "),t("p",[e._v("每个生态系统都可以拥有一个所谓的虚拟生态系统，可以在一个节点内与区块链外的数据表一起使用，并且不能直接影响区块链或其他虚拟生态系统。在这种情况下，托管这样虚拟生态系统的节点会编译其合约并创建自己的虚拟机。")]),e._v(" "),t("h2",{attrs:{id:"virtual-machine-structures"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#virtual-machine-structures"}},[e._v("#")]),e._v(" 虚拟机结构  ")]),e._v(" "),t("h3",{attrs:{id:"vm-structure"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vm-structure"}},[e._v("#")]),e._v(" VM结构 ")]),e._v(" "),t("p",[e._v("虚拟机按如下结构定义在内存中。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("type VM struct {\n    Block\n    ExtCost       func(string) int64\n    FuncCallsDB   map[string]struct{}\n    Extern        bool\n    ShiftContract int64\n    logger        *log.Entry\n}\n")])])]),t("p",[e._v("VM结构具有以下元素：")]),e._v(" "),t("blockquote",[t("ul",[t("li",[t("strong",[e._v("Block")]),e._v(" - 包含一个 "),t("a",{attrs:{href:"#%E5%9D%97%E7%BB%93%E6%9E%84"}},[e._v("块结构")]),e._v("；")]),e._v(" "),t("li",[t("strong",[e._v("ExtCost")]),e._v(" - 一个函数，该函数返回执行外部golang函数的费用；")]),e._v(" "),t("li",[t("strong",[e._v("FuncCallsDB")]),e._v(" - golang函数名称集合，该函数名返回执行成本作为第一个参数。这些函数使用 "),t("strong",[e._v("EXPLAIN")]),e._v(" 计算处理数据库的成本；")]),e._v(" "),t("li",[t("strong",[e._v("Extern")]),e._v(" - 一个表示合约是否为外部合约的布尔标识，创建VM时，它设置为true，编译代码时不需要显示调用的合约。也就是说，它允许调用将来确定的合约代码；")]),e._v(" "),t("li",[t("strong",[e._v("ShiftContract")]),e._v(" VM中第一个合约的ID；")]),e._v(" "),t("li",[t("strong",[e._v("logger")]),e._v(" VM的错误日志输出。")])])]),e._v(" "),t("h3",{attrs:{id:"block-structure"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#block-structure"}},[e._v("#")]),e._v(" 块结构 ")]),e._v(" "),t("p",[e._v("虚拟机是由 "),t("strong",[e._v("块Block")]),e._v(" 对象类型组成的树。")]),e._v(" "),t("p",[e._v("块是包含一些字节码的独立单元。简单地说，您在语言的大括号("),t("code",[e._v("{}")]),e._v(")中放入的所有内容都是一个块。")]),e._v(" "),t("p",[e._v("例如，下面的代码创建一个带有函数的块。该块又包含一个带有 "),t("em",[e._v("if")]),e._v(" 语句的块，该语句又包含一个带有 "),t("em",[e._v("while")]),e._v(" 语句的块。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("func my() {\n     if true {\n          while false {\n               ...\n           }\n     }\n} \n")])])]),t("p",[e._v("块按如下结构定义在内存中。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("type Block struct {\n    Objects  map[string]*ObjInfo\n    Type     int\n    Owner    *OwnerInfo\n    Info     interface{}\n    Parent   *Block\n    Vars     []reflect.Type\n    Code     ByteCodes\n    Children Blocks\n}\n")])])]),t("p",[e._v("块结构具有以下元素：")]),e._v(" "),t("blockquote",[t("ul",[t("li",[t("strong",[e._v("Objects")]),e._v(" - 一个 "),t("a",{attrs:{href:"#objinfo-structure"}},[e._v("ObjInfo")]),e._v(" 指针类型的内部对象的映射。例如，如果块中有一个变量，那么可以通过它的名称获得关于它的信息；")]),e._v(" "),t("li",[t("strong",[e._v("Type")]),e._v(" - 块的类型。块为函数时，类型为 "),t("strong",[e._v("ObjFunc")]),e._v("。块为合约时，类型为 "),t("strong",[e._v("ObjContract")]),e._v("；")]),e._v(" "),t("li",[t("strong",[e._v("Owner")]),e._v(" - 一个 "),t("strong",[e._v("OwnerInfo")]),e._v(" 指针类型的结构。该结构包含有关已编译合约所有者的信息。它在合约编译期间指定或从 "),t("strong",[e._v("contracts")]),e._v(" 表中获取；")]),e._v(" "),t("li",[t("strong",[e._v("Info")]),e._v(" - 包含有关对象的信息，这取决于块类型；")]),e._v(" "),t("li",[t("strong",[e._v("Parent")]),e._v(" - 指向父块的指针；")]),e._v(" "),t("li",[t("strong",[e._v("Vars")]),e._v(" - 一个包含当前块变量类型的数组；")]),e._v(" "),t("li",[t("strong",[e._v("Code")]),e._v(" - 块本身字节码，当控制权传递给该块时会执行该块字节码，例如，函数调用或者循环体；")]),e._v(" "),t("li",[t("strong",[e._v("Children")]),e._v(" - 一个包含子块的数组，例如，函数嵌套、循环、条件操作符。")])])]),e._v(" "),t("h3",{attrs:{id:"objinfo-structure"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#objinfo-structure"}},[e._v("#")]),e._v(" ObjInfo结构 ")]),e._v(" "),t("p",[t("strong",[e._v("ObjInfo")]),e._v(" 结构包含有关内部对象的信息。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("type ObjInfo struct {\n   Type int\n   Value interface{}\n}\n")])])]),t("p",[e._v("ObjInfo结构具有以下元素：")]),e._v(" "),t("blockquote",[t("ul",[t("li",[t("strong",[e._v("Type")]),e._v(" 是对象类型。它可以是以下值之一：\n"),t("ul",[t("li",[t("strong",[e._v("ObjContract")]),e._v(" --"),t("a",{attrs:{href:"#contractinfo-structure"}},[e._v("合约")]),e._v("；")]),e._v(" "),t("li",[t("strong",[e._v("ObjFunc")]),e._v(" -- 函数；")]),e._v(" "),t("li",[t("strong",[e._v("ObjExtFunc")]),e._v(" -- 外部golang函数；")]),e._v(" "),t("li",[t("strong",[e._v("ObjVar")]),e._v(" -- 变量；")]),e._v(" "),t("li",[t("strong",[e._v("ObjExtend")]),e._v(" -- $name 变量。")])])]),e._v(" "),t("li",[t("strong",[e._v("Value")]),e._v(" -- 包含每种类型的结构。")])])]),e._v(" "),t("h4",{attrs:{id:"contractinfo-structure"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#contractinfo-structure"}},[e._v("#")]),e._v(" ContractInfo结构 ")]),e._v(" "),t("p",[e._v("指向 "),t("strong",[e._v("ObjContract")]),e._v(" 类型，"),t("strong",[e._v("Value")]),e._v(" 字段包含 "),t("strong",[e._v("ContractInfo")]),e._v(" 结构。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("type ContractInfo struct {\n    ID uint32\n    Name string\n    Owner *OwnerInfo\n    Used map[string]bool\n    Tx *[]*FieldInfo\n}\n")])])]),t("p",[e._v("ContractInfo结构具有以下元素：")]),e._v(" "),t("blockquote",[t("ul",[t("li",[t("strong",[e._v("ID")]),e._v(" -- 合约ID。调用合约时，该值在区块链中显示；")]),e._v(" "),t("li",[t("strong",[e._v("Name")]),e._v(" -- 合约名称；")]),e._v(" "),t("li",[t("strong",[e._v("Owner")]),e._v(" -- 关于合约的其他信息；")]),e._v(" "),t("li",[t("strong",[e._v("Used")]),e._v(" -- 已被调用的合约名称的映射；")]),e._v(" "),t("li",[t("strong",[e._v("Tx")]),e._v(" -- 合约 "),t("RouterLink",{attrs:{to:"/zh-CN/topics/script.html#data-section"}},[e._v("数据部分")]),e._v(" 描述的数据数组。")],1)])]),e._v(" "),t("h4",{attrs:{id:"fieldinfo-structure"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#fieldinfo-structure"}},[e._v("#")]),e._v(" FieldInfo结构 ")]),e._v(" "),t("p",[e._v("FieldInfo结构用于 "),t("strong",[e._v("ContractInfo")]),e._v(" 结构并描述合约"),t("RouterLink",{attrs:{to:"/zh-CN/topics/script.html#data-section"}},[e._v("数据部分")]),e._v(" 的元素。")],1),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("type FieldInfo struct {\n      Name string\n      Type reflect.Type\n      Original uint32\n      Tags string\n}\n")])])]),t("p",[e._v("FieldInfo结构具有以下元素：")]),e._v(" "),t("blockquote",[t("ul",[t("li",[t("strong",[e._v("Name")]),e._v(" - 字段名称；")]),e._v(" "),t("li",[t("strong",[e._v("Type")]),e._v(" - 字段类型；")]),e._v(" "),t("li",[t("strong",[e._v("Original")]),e._v(" - 可选项字段；")]),e._v(" "),t("li",[t("strong",[e._v("Tags")]),e._v(" -- 该字段的附加标签。")])])]),e._v(" "),t("h4",{attrs:{id:"funcinfo-structure"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#funcinfo-structure"}},[e._v("#")]),e._v(" FuncInfo结构 ")]),e._v(" "),t("p",[e._v("指向 "),t("strong",[e._v("ObjFunc")]),e._v(" 类型，"),t("strong",[e._v("Value")]),e._v(" 字段包含 "),t("strong",[e._v("FuncInfo")]),e._v(" 结构。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("type FuncInfo struct {\n    Params []reflect.Type\n    Results []reflect.Type\n    Names *map[string]FuncName\n    Variadic bool\n    ID uint32\n}\n")])])]),t("p",[e._v("FuncInfo结构具有以下元素：")]),e._v(" "),t("blockquote",[t("ul",[t("li",[t("strong",[e._v("Params")]),e._v(" -- 参数类型数组；")]),e._v(" "),t("li",[t("strong",[e._v("Results")]),e._v(" -- 返回结果类型数组；")]),e._v(" "),t("li",[t("strong",[e._v("Names")]),e._v(" -- 尾部函数的数据映射，例如，"),t("code",[e._v("DBFind().Columns ()")]),e._v("；")]),e._v(" "),t("li",[t("strong",[e._v("Variadic")]),e._v(" -- 如果函数可以具有可变数量的参数，则为true；")]),e._v(" "),t("li",[t("strong",[e._v("ID")]),e._v(" -- 函数ID。")])])]),e._v(" "),t("h4",{attrs:{id:"funcname-structure"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#funcname-structure"}},[e._v("#")]),e._v(" FuncName结构 ")]),e._v(" "),t("p",[e._v("FuncName结构用于 "),t("strong",[e._v("FuncInfo")]),e._v(" 并描述尾部函数的数据。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("type FuncName struct {\n   Params []reflect.Type\n   Offset []int\n   Variadic bool\n}\n")])])]),t("p",[e._v("FuncName结构具有以下元素：")]),e._v(" "),t("blockquote",[t("ul",[t("li",[t("strong",[e._v("Params")]),e._v(" -- 参数类型数组；")]),e._v(" "),t("li",[t("strong",[e._v("Offset")]),e._v(" -- 这些变量的偏移量数组。实际上，所有参数在函数中都可以使用点 "),t("code",[e._v(".")]),e._v(" 来初始化值；")]),e._v(" "),t("li",[t("strong",[e._v("Variadic")]),e._v(" -- 如果尾部函数可以具有可变数量的参数。则为true。")])])]),e._v(" "),t("h4",{attrs:{id:"extfuncinfo-structure"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#extfuncinfo-structure"}},[e._v("#")]),e._v(" ExtFuncInfo结构 ")]),e._v(" "),t("p",[e._v("指向 "),t("strong",[e._v("ObjExtFunc")]),e._v(" 类型，"),t("strong",[e._v("Value")]),e._v(" 字段包含 "),t("strong",[e._v("ExtFuncInfo")]),e._v("结构。用于描述golang函数。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("type ExtFuncInfo struct {\n   Name string\n   Params []reflect.Type\n   Results []reflect.Type\n   Auto []string\n   Variadic bool\n   Func interface{}\n}\n")])])]),t("p",[e._v("ExtFuncInfo结构具有以下元素：")]),e._v(" "),t("blockquote",[t("ul",[t("li",[t("strong",[e._v("Name")]),e._v("、"),t("strong",[e._v("Params、Results")]),e._v(" 参数和"),t("a",{attrs:{href:"#funcinfo-structure"}},[e._v("FuncInfo")]),e._v(" 结构相同；")]),e._v(" "),t("li",[t("strong",[e._v("Auto")]),e._v(" -- 一个变量数组，如果有，则作为附加参数传递给函数，例如，"),t("em",[e._v("SmartContract")]),e._v(" 类型的变量 "),t("em",[e._v("sc")]),e._v("；")]),e._v(" "),t("li",[t("strong",[e._v("Func")]),e._v(" -- golang函数。")])])]),e._v(" "),t("h4",{attrs:{id:"varinfo-structure"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#varinfo-structure"}},[e._v("#")]),e._v(" VarInfo结构 ")]),e._v(" "),t("p",[e._v("指向 "),t("strong",[e._v("ObjVar")]),e._v(" 类型，"),t("strong",[e._v("Value")]),e._v(" 字段包含一个 "),t("strong",[e._v("VarInfo")]),e._v(" 结构。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("type VarInfo struct {\n   Obj *ObjInfo\n   Owner *Block\n}\n")])])]),t("p",[e._v("VarInfo结构具有以下元素：")]),e._v(" "),t("blockquote",[t("ul",[t("li",[t("strong",[e._v("Obj")]),e._v(" -- 关于变量类型和变量值的信息；")]),e._v(" "),t("li",[t("strong",[e._v("Owner")]),e._v(" -- 指向所属块的指针。")])])]),e._v(" "),t("h4",{attrs:{id:"objextend-value"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#objextend-value"}},[e._v("#")]),e._v(" ObjExtend值 ")]),e._v(" "),t("p",[e._v("指向 "),t("strong",[e._v("ObjExtend")]),e._v(" 类型，"),t("strong",[e._v("Value")]),e._v(" 字段包含一个字符串，其中包含变量或函数的名称。")]),e._v(" "),t("h2",{attrs:{id:"virtual-machine-commands"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#virtual-machine-commands"}},[e._v("#")]),e._v(" 虚拟机指令 ")]),e._v(" "),t("h3",{attrs:{id:"bytecode-structure"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bytecode-structure"}},[e._v("#")]),e._v(" ByteCode结构 ")]),e._v(" "),t("p",[e._v("字节码是 "),t("strong",[e._v("ByteCode")]),e._v(" 类型结构的序列。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("type ByteCode struct {\n   Cmd uint16\n   Value interface{}\n}\n")])])]),t("p",[e._v("该结构具有以下字段：")]),e._v(" "),t("blockquote",[t("ul",[t("li",[t("strong",[e._v("Cmd")]),e._v(" - 存储指令的标识符；")]),e._v(" "),t("li",[t("strong",[e._v("Value")]),e._v(" - 包含操作数（值）。")])])]),e._v(" "),t("p",[e._v("通常情况，指令对堆栈的顶部元素执行操作，并在必要时将结果值写入其中。")]),e._v(" "),t("h3",{attrs:{id:"command-identifiers"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#command-identifiers"}},[e._v("#")]),e._v(" 指令标识符 ")]),e._v(" "),t("p",[t("em",[e._v("vm/cmds_list.go")]),e._v(" 文件描述了虚拟机指令的标识符。")]),e._v(" "),t("blockquote",[t("ul",[t("li",[t("strong",[e._v("cmdPush")]),e._v(" -- 将 "),t("em",[e._v("Value")]),e._v(" 字段的值放到堆栈。例如，将数字和行放入堆栈；")]),e._v(" "),t("li",[t("strong",[e._v("cmdVar")]),e._v(" -- 将变量的值放入堆栈。*Value* 包含一个指向 "),t("em",[e._v("VarInfo")]),e._v(" 结构的指针以及关于该变量的信息；")]),e._v(" "),t("li",[t("strong",[e._v("cmdExtend")]),e._v(" -- 将外部变量的值放入堆栈。*Value* 包含一个带有变量名称的字符串（以 "),t("code",[e._v("$")]),e._v(" 开头）；")]),e._v(" "),t("li",[t("strong",[e._v("cmdCallExtend")]),e._v(" -- 调用外部函数（名称以 "),t("code",[e._v("$")]),e._v(" 开头）。函数的参数从堆栈中获取，函数的结果被放入堆栈。*Value* 包含一个函数名称（以 "),t("code",[e._v("$")]),e._v(" 开头）；")]),e._v(" "),t("li",[t("strong",[e._v("cmdPushStr")]),e._v(" -- 将 "),t("em",[e._v("Value")]),e._v(" 中的字符串放入堆栈；")]),e._v(" "),t("li",[t("strong",[e._v("cmdCall")]),e._v(" -- 调用虚拟机函数，*Value* 包含 "),t("strong",[e._v("ObjInfo")]),e._v(" 结构。该指令适用于 "),t("strong",[e._v("ObjExtFunc")]),e._v(" golang函数和 "),t("strong",[e._v("ObjFunc")]),e._v(" needle 函数。调用函数时，将从堆栈中获取其参数，并将结果值放入堆栈；")]),e._v(" "),t("li",[t("strong",[e._v("cmdCallVari")]),e._v(" -- 类似于 "),t("strong",[e._v("cmdCall")]),e._v(" 指令，调用虚拟机函数。该指令用于调用具有可变数量参数的函数；")]),e._v(" "),t("li",[t("strong",[e._v("cmdReturn")]),e._v(" -- 用于退出函数，返回值将放入到堆栈，不使用 "),t("em",[e._v("Value")]),e._v(" 字段；")]),e._v(" "),t("li",[t("strong",[e._v("cmdIf")]),e._v(" -- 将控制权转移到 "),t("strong",[e._v("块")]),e._v(" 结构中的字节码，该指令在 "),t("em",[e._v("Value")]),e._v(" 字段中传递。仅当 "),t("em",[e._v("valueToBool")]),e._v(" 函数调用堆栈顶部元素返回 "),t("code",[e._v("true")]),e._v(" 时才会将控制权转移到堆栈。否则控制权转移到下一个指令；")]),e._v(" "),t("li",[t("strong",[e._v("cmdElse")]),e._v(" -- 该指令的工作方式与 "),t("strong",[e._v("cmdIf")]),e._v(" 指令相同，但仅当 "),t("em",[e._v("valueToBool")]),e._v(" 函数调用堆栈顶部元素返回 "),t("code",[e._v("false")]),e._v(" 时控制权才会转移到指定的块；")]),e._v(" "),t("li",[t("strong",[e._v("cmdAssignVar")]),e._v(" -- 从 "),t("em",[e._v("Value")]),e._v(" 获取 "),t("strong",[e._v("VarInfo")]),e._v(" 类型的变量列表。这些变量使用 "),t("strong",[e._v("cmdAssign")]),e._v(" 指令获取值；")]),e._v(" "),t("li",[t("strong",[e._v("cmdAssign")]),e._v(" -- 将堆栈中的值赋给 "),t("strong",[e._v("cmdAssignVar")]),e._v(" 指令获得的变量；")]),e._v(" "),t("li",[t("strong",[e._v("cmdLabel")]),e._v(" -- 控制权在while循环期间被返回时定义一个标记；")]),e._v(" "),t("li",[t("strong",[e._v("cmdContinue")]),e._v(" -- 该指令将控制权传递给 "),t("strong",[e._v("cmdLabel")]),e._v(" 标记。执行循环的新迭代时，不使用 "),t("em",[e._v("Value")]),e._v(" ；")]),e._v(" "),t("li",[t("strong",[e._v("cmdWhile")]),e._v(" -- 使用 "),t("em",[e._v("valueToBool")]),e._v(" 检查堆栈的顶部元素。如果该值为 "),t("code",[e._v("true")]),e._v("，则从 "),t("em",[e._v("value")]),e._v(" 字段调用 "),t("strong",[e._v("块")]),e._v(" 结构；")]),e._v(" "),t("li",[t("strong",[e._v("cmdBreak")]),e._v(" -- 退出循环；")]),e._v(" "),t("li",[t("strong",[e._v("cmdIndex")]),e._v(" -- 通过索引将 "),t("em",[e._v("map")]),e._v(" 或 "),t("em",[e._v("array")]),e._v(" 中的值放入堆栈，不使用 "),t("em",[e._v("Value")]),e._v("。例如："),t("code",[e._v("(map | array) (index value) => (map | array [index value])")]),e._v("；")]),e._v(" "),t("li",[t("strong",[e._v("cmdSetIndex")]),e._v(" -- 将堆栈顶部元素的值分配给 "),t("em",[e._v("map")]),e._v(" 或 "),t("em",[e._v("array")]),e._v(" 的元素，不使用 "),t("em",[e._v("Value")]),e._v("。例如："),t("code",[e._v("(map | array) (index value) (value) => (map | array)")]),e._v("；")]),e._v(" "),t("li",[t("strong",[e._v("cmdFuncName")]),e._v(" -- 添加的参数通过用点 "),t("code",[e._v(".")]),e._v(" 划分顺序来描述。例如："),t("code",[e._v("func name => Func (...) .Name (...)")]),e._v("；")]),e._v(" "),t("li",[t("strong",[e._v("cmdUnwrapArr")]),e._v(" -- 如果堆栈顶部元素为数组，则定义一个布尔标记；")]),e._v(" "),t("li",[t("strong",[e._v("cmdMapInit")]),e._v(" -- 初始化 "),t("em",[e._v("map")]),e._v(" 的值；")]),e._v(" "),t("li",[t("strong",[e._v("cmdArrayInit")]),e._v(" -- 初始化 "),t("em",[e._v("array")]),e._v(" 的值；")]),e._v(" "),t("li",[t("strong",[e._v("cmdError")]),e._v(" -- 当合约或者函数以某个指定的 "),t("code",[e._v("error, warning, info")]),e._v(" 错误终止时，该指令创建。")])])]),e._v(" "),t("h3",{attrs:{id:"stack-operation-commands"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#stack-operation-commands"}},[e._v("#")]),e._v(" 堆栈操作指令 ")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("在当前版本中，这些指令是不完全的自动类型转换。例如:\n`string + float | int | decimal => float | int | decimal`，`float + int | str => float`，但是\n`int + string => runtime error`。\n")])])]),t("p",[e._v("下面是直接处理堆栈的指令。这些指令中不使用 "),t("em",[e._v("Value")]),e._v(" 字段。")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("cmdNot")]),e._v(" -- 逻辑否定。"),t("code",[e._v("(val) => (!ValueToBool(val))")]),e._v("；")]),e._v(" "),t("li",[t("strong",[e._v("cmdSign")]),e._v(" -- 符号变化。"),t("code",[e._v("(val) => (-val)")]),e._v("；")]),e._v(" "),t("li",[t("strong",[e._v("cmdAdd")]),e._v(" -- 加法。"),t("code",[e._v("(val1)(val2) => (val1 + val2)")]),e._v("；")]),e._v(" "),t("li",[t("strong",[e._v("cmdSub")]),e._v(" -- 减法。"),t("code",[e._v("(val1)(val2) => (val1 - val2)")]),e._v("；")]),e._v(" "),t("li",[t("strong",[e._v("cmdMul")]),e._v(" -- 乘法。"),t("code",[e._v("(val1)(val2) => (val1 * val2)")]),e._v("；")]),e._v(" "),t("li",[t("strong",[e._v("cmdDiv")]),e._v(" -- 除法。"),t("code",[e._v("(val1)(val2) => (val1 / val2)")]),e._v("；")]),e._v(" "),t("li",[t("strong",[e._v("cmdAnd")]),e._v(" -- 逻辑与。"),t("code",[e._v("(val1)(val2) => (valueToBool(val1) && valueToBool(val2))")]),e._v("；")]),e._v(" "),t("li",[t("strong",[e._v("cmdOr")]),e._v(" -- 逻辑或。"),t("code",[e._v("(val1)(val2) => (valueToBool(val1) || valueToBool(val2))")]),e._v("；")]),e._v(" "),t("li",[t("strong",[e._v("cmdEqual")]),e._v(" -- 等式比较，返回bool。"),t("code",[e._v("(val1)(val2) => (val1 == val2)")]),e._v("；")]),e._v(" "),t("li",[t("strong",[e._v("cmdNotEq")]),e._v(" -- 不等式比较，返回bool。"),t("code",[e._v("(val1)(val2) => (val1 != val2)")]),e._v("；")]),e._v(" "),t("li",[t("strong",[e._v("cmdLess")]),e._v(" -- 小于式比较，返回bool。"),t("code",[e._v("(val1)(val2) => (val1 < val2)")]),e._v("；")]),e._v(" "),t("li",[t("strong",[e._v("cmdNotLess")]),e._v(" -- 大于等于式比较，返回bool。"),t("code",[e._v("(val1)(val2) => (val1 >= val2)")]),e._v("；")]),e._v(" "),t("li",[t("strong",[e._v("cmdGreat")]),e._v(" -- 大于式比较，返回bool。"),t("code",[e._v("(val1)(val2) => (val1 > val2)")]),e._v("；")]),e._v(" "),t("li",[t("strong",[e._v("cmdNotGreat")]),e._v(" -- 小于等于式比较，返回bool。"),t("code",[e._v("(val1)(val2) => (val1 <= val2)")]),e._v("。")])]),e._v(" "),t("h3",{attrs:{id:"runtime-structure"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#runtime-structure"}},[e._v("#")]),e._v(" Runtime结构 ")]),e._v(" "),t("p",[e._v("执行字节码不会影响虚拟机。例如，它允许在单个虚拟机中同时运行各种函数和合约。"),t("strong",[e._v("Runtime")]),e._v(" 结构用于运行函数和合约，以及任何表达式和字节码。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("type RunTime struct {\n   stack []interface{}\n   blocks []*blockStack\n   vars []interface{}\n   extend *map[string]interface{}\n   vm *VM\n   cost int64\n   err error\n}\n")])])]),t("ul",[t("li",[t("strong",[e._v("stack")]),e._v(" -- 执行字节码的堆栈；")]),e._v(" "),t("li",[t("strong",[e._v("blocks")]),e._v(" -- 块调用堆栈；")]),e._v(" "),t("li",[t("strong",[e._v("vars")]),e._v(" -- 变量堆栈。在块中调用字节码时，其变量将添加到该变量堆栈中。退出块后，变量堆栈的大小将返回到先前的值；")]),e._v(" "),t("li",[t("strong",[e._v("extend")]),e._v(" -- 指向外部变量值（"),t("code",[e._v("$name")]),e._v("）映射指针；")]),e._v(" "),t("li",[t("strong",[e._v("vm")]),e._v(" -- 虚拟机指针；")]),e._v(" "),t("li",[t("strong",[e._v("cost")]),e._v(" -- 执行结果的燃料单位；")]),e._v(" "),t("li",[t("strong",[e._v("err")]),e._v(" -- 执行时的错误。")])]),e._v(" "),t("h4",{attrs:{id:"blockstack-structure"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#blockstack-structure"}},[e._v("#")]),e._v(" blockStack结构 ")]),e._v(" "),t("p",[e._v("blockStack结构用于 "),t("strong",[e._v("Runtime")]),e._v(" 结构。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("type blockStack struct {\n     Block *Block\n     Offset int\n}\n")])])]),t("ul",[t("li",[t("strong",[e._v("Block")]),e._v(" -- 正在执行的块的指针；")]),e._v(" "),t("li",[t("strong",[e._v("Offset")]),e._v(" -- 在指定块的字节码中执行的最后一个指令的偏移量。")])]),e._v(" "),t("h3",{attrs:{id:"runcode-function"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#runcode-function"}},[e._v("#")]),e._v(" RunCode函数 ")]),e._v(" "),t("p",[e._v("字节码在 "),t("strong",[e._v("RunCode")]),e._v("函数中执行。它包含一个循环，为每个字节码指令执行相应的操作。在处理字节码之前，必须初始化必要的数据。")]),e._v(" "),t("p",[e._v("在这里新块被添加到其他块中。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("rt.blocks = append(rt.blocks, &blockStack{block, len(rt.vars)})\n")])])]),t("p",[e._v("接下来，获得尾部函数的相关参数信息。这些参数包含在堆栈的最后一个元素中。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var namemap map[string][]interface{}\nif block.Type == ObjFunc && block.Info.(*FuncInfo).Names != nil {\n    if rt.stack[len(rt.stack)-1] != nil {\n        namemap = rt.stack[len(rt.stack)-1].(map[string][]interface{})\n    }\n    rt.stack = rt.stack[:len(rt.stack)-1]\n}\n")])])]),t("p",[e._v("然后，必须使用初始值初始化当前块中定义的所有变量。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("start := len(rt.stack)\nvaroff := len(rt.vars)\nfor vkey, vpar := range block.Vars {\n   rt.cost--\n   var value interface{}\n")])])]),t("p",[e._v("由于函数中的变量也是变量，所以我们需要按照函数本身所描述的顺序从堆栈的最后一个元素中取出它们。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    if block.Type == ObjFunc && vkey < len(block.Info.(*FuncInfo).Params) {\n      value = rt.stack[start-len(block.Info.(*FuncInfo).Params)+vkey]\n    } else {\n")])])]),t("p",[e._v("在此使用初始值初始化局部变量。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("        value = reflect.New(vpar).Elem().Interface()\n        if vpar == reflect.TypeOf(map[string]interface{}{}) {\n           value = make(map[string]interface{})\n        } else if vpar == reflect.TypeOf([]interface{}{}) {\n           value = make([]interface{}, 0, len(rt.vars)+1)\n        }\n    }\nrt.vars = append(rt.vars, value)\n}\n")])])]),t("p",[e._v("接下来，更新在尾部函数中传递的变量参数的值。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("if namemap != nil {\n  for key, item := range namemap {\n    params := (*block.Info.(*FuncInfo).Names)[key]\n    for i, value := range item {\n       if params.Variadic && i >= len(params.Params)-1 {\n")])])]),t("p",[e._v("如果传递的变量参数为可变数量的参数，那么将它们组合成一个变量数组。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("                off := varoff + params.Offset[len(params.Params)-1]\n                rt.vars[off] = append(rt.vars[off].([]interface{}), value)\n            } else {\n                rt.vars[varoff+params.Offset[i]] = value\n            }\n        }\n    }\n}\n")])])]),t("p",[e._v("之后，我们要做的就是删除作为函数参数从堆栈顶部传递的值，从而移动堆栈。我们已经将它们的值复制到一个变量数组中。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("if block.Type == ObjFunc {\n     start -= len(block.Info.(*FuncInfo).Params)\n}\n")])])]),t("p",[e._v("字节码指令循环执行结束后，我们必须正确地清除堆栈。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("last := rt.blocks[len(rt.blocks)-1]\n")])])]),t("p",[e._v("将当前块从块堆栈中删除。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("rt.blocks = rt.blocks[:len(rt.blocks)-1]\nif status == statusReturn {\n")])])]),t("p",[e._v("如果成功退出已执行的函数，我们将返回值添加到上一个堆栈的尾部。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("if last.Block.Type == ObjFunc {\n   for count := len(last.Block.Info.(*FuncInfo).Results); count > 0; count-- {\n     rt.stack[start] = rt.stack[len(rt.stack)-count]\n     start++\n   }\n   status = statusNormal\n } else {\n")])])]),t("p",[e._v("如您所见，如果我们不执行函数，那么我们就不会恢复堆栈状态并按原样退出函数。原因是函数中已经执行的循环和条件结构也是字节码块。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("return\n    }\n}\nrt.stack = rt.stack[:start]\n")])])]),t("h3",{attrs:{id:"other-functions-for-operations-with-vm"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#other-functions-for-operations-with-vm"}},[e._v("#")]),e._v(" VM的其他函数操作 ")]),e._v(" "),t("p",[e._v("使用 "),t("strong",[e._v("NewVM")]),e._v(" 函数创建虚拟机。每个虚拟机都 "),t("strong",[e._v("Extend")]),e._v(" 函数添加了四个函数："),t("strong",[e._v("ExecContract、MemoryUsage、CallContract")]),e._v(" 和 "),t("strong",[e._v("Settings")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("for key, item := range ext.Objects {\n    fobj := reflect.ValueOf(item).Type()\n")])])]),t("p",[e._v("我们遍历所有传递的对象，只查看函数。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("switch fobj.Kind() {\ncase reflect.Func:\n")])])]),t("p",[e._v("根据接收到的相关该函数的信息填充 "),t("strong",[e._v("ExtFuncInfo")]),e._v(" 结构，并按名称将其结构添加到顶层的 "),t("strong",[e._v("Objects")]),e._v(" 映射。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("data := ExtFuncInfo{key, make([]reflect.Type, fobj.NumIn()), make([]reflect.Type, fobj.NumOut()), \n   make([]string, fobj.NumIn()), fobj.IsVariadic(), item}\nfor i := 0; i < fobj.NumIn(); i++ {\n")])])]),t("p",[t("strong",[e._v("ExtFuncInfo")]),e._v(" 结构有一个 "),t("strong",[e._v("Auto")]),e._v(" 参数数组。通常第一个参数为 "),t("code",[e._v("sc *SmartContract")]),e._v(" 或 "),t("code",[e._v("rt *Runtime")]),e._v("，\n我们不能从 needle 语言中传递它们，因为在执行一些golang函数时它们对我们来说是必需的。因此，我们指定在调用函数时将自动使用这些变量。\n在这种情况下，上述四个函数的第一个参数为"),t("code",[e._v("rt *Runtime")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("if isauto, ok := ext.AutoPars[fobj.In(i).String()]; ok {\n  data.Auto[i] = isauto\n}\n")])])]),t("p",[e._v("赋值有关参数的信息。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("data.Params[i] = fobj.In(i)\n}\n")])])]),t("p",[e._v("以及返回值的类型。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("for i := 0; i < fobj.NumOut(); i++ {\n   data.Results[i] = fobj.Out(i)\n}\n")])])]),t("p",[e._v("向根 "),t("strong",[e._v("Objects")]),e._v(" 添加一个函数，这样编译器可以稍后在使用合约时找到它们。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("vm.Objects[key] = &ObjInfo{ObjExtFunc, data}\n    }\n}\n")])])]),t("h2",{attrs:{id:"compiler"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#compiler"}},[e._v("#")]),e._v(" 编译器 ")]),e._v(" "),t("p",[t("em",[e._v("compile.go")]),e._v(" 文件的函数负责编译从词法分析器获得的标记数组。\n编译可以有条件地分为两个级别，在高层级别，我们处理函数、合约、代码块、条件语句和循环语句、变量定义等等。\n在底层级别，我们编译循环和条件语句中的代码块或条件内的表达式。")]),e._v(" "),t("p",[e._v("首先，让我们描述简单的低层级别。在 "),t("strong",[e._v("compileEval")]),e._v(" 函数可以完成将表达式转换为字节码。\n由于我们是使用堆栈的虚拟机，因此有必要将普通的中缀记录表达式转换为后缀表示法或逆波兰表示法。\n例如，"),t("code",[e._v("1+2")]),e._v(" 转换为 "),t("code",[e._v("12+")]),e._v("，然后将 "),t("code",[e._v("1")]),e._v(" 和 "),t("code",[e._v("2")]),e._v("放入堆栈，然后我们对堆栈中的最后两个元素应用加法运算，并将结果写入堆栈。\n这种"),t("a",{attrs:{href:"https://master.virmandy.net/perevod-iz-infiksnoy-notatsii-v-postfiksnuyu-obratnaya-polskaya-zapis/",target:"_blank",rel:"noopener noreferrer"}},[e._v("转换算法"),t("OutboundLink")],1),e._v(" 可以在互联网上找到。")]),e._v(" "),t("p",[e._v("全局变量 "),t("code",[e._v("opers = map [uint32] operPrior")]),e._v(" 包含转换成逆波兰表示法时所必需的操作的优先级。")]),e._v(" "),t("p",[e._v("以下变量在 "),t("strong",[e._v("compileEval")]),e._v(" 函数开头定义：")]),e._v(" "),t("blockquote",[t("ul",[t("li",[t("strong",[e._v("buffer")]),e._v(" -- 字节码指令的临时缓冲区；")]),e._v(" "),t("li",[t("strong",[e._v("bytecode")]),e._v(" -- 字节码指令的最终缓冲区；")]),e._v(" "),t("li",[t("strong",[e._v("parcount")]),e._v(" -- 调用函数时用于计算参数的临时缓冲区；")]),e._v(" "),t("li",[t("strong",[e._v("setIndex")]),e._v(" -- 当我们分配 "),t("em",[e._v("map")]),e._v(" 或 "),t("em",[e._v("array")]),e._v(" 元素时，工作过程中的变量被设置为 [true]{.title-ref}。\n例如，"),t("code",[e._v('a["my"] = 10')]),e._v("，在这种情况下，我们需要使用指定的 "),t("strong",[e._v("cmdSetIndex")]),e._v(" 指令。")])])]),e._v(" "),t("p",[e._v("我们在一个循环体中获得一个标记并作出相应的处理，例如，如果找到大括号，然后停止解析表达式。在移动字符串时，我们会查看前一个语句是否是一个操作符以及是否在括号内，否则我们退出并解析表达式。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("case isRCurly, isLCurly:\n     i--\n     if prevLex == isComma || prevLex == lexOper {\n                return errEndExp\n           }\n    break main\ncase lexNewLine:\n      if i > 0 && ((*lexems)[i-1].Type == isComma || (*lexems)[i-1].Type == lexOper) {\n           continue main\n      }\n     for k := len(buffer) - 1; k >= 0; k-- {\n          if buffer[k].Cmd == cmdSys {\n              continue main\n         }\n     }\n    break main\n")])])]),t("p",[e._v("通常情况下，该算法本身对应于一种转换为逆波兰表示法的算法。\n考虑到一些必要的合约、函数、索引的调用，以及解析时不会遇到的其他事情和解析 "),t("em",[e._v("lexIdent")]),e._v(" 类型标记的选项，我们将检查具有此名称的变量、函数或合约。\n如果没有找到任何相关内容而且这不是函数或合约调用，那么我们会指出错误。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("objInfo, tobj := vm.findObj(lexem.Value.(string), block)\nif objInfo == nil && (!vm.Extern || i > *ind || i >= len(*lexems)-2 || (*lexems)[i+1].Type != isLPar) {\n      return fmt.Errorf(`unknown identifier %s`, lexem.Value.(string))\n}\n")])])]),t("p",[e._v("我们可能会遇到这样的情况，稍后将描述合约调用。在本例中，如果没有找到同名函数和变量，那么我们认为将调用合约。\n在该编译语言中，合约和函数调用没有区别。但是我们需要通过在字节码中使用的"),t("strong",[e._v("ExecContract")]),e._v(" 函数来调用合约。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("if objInfo.Type == ObjContract {\n    if objInfo.Value != nil {\n              objContract = objInfo.Value.(*Block)\n            }\n    objInfo, tobj = vm.findObj(`ExecContract`, block)\n    isContract = true\n}\n")])])])]),e._v(" "),t("p",[e._v("我们将到目前为止的变量数量记录在 "),t("code",[e._v("count")]),e._v("中，该值也会随着函数参数数量一起写入堆栈。\n在每次后续检测参数时，我们只需在堆栈的最后一个元素中将该数量增加一个单位。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("count := 0\nif (*lexems)[i+2].Type != isRPar {\n    count++\n}\n")])])]),t("p",[e._v("我们有已调用合约的列表参数 "),t("em",[e._v("Used")]),e._v("，因此我们需要为合约被调用的情况做标记。\n如果在没有参数的情况下调用合约，我们必须添加两个空参数去调用 "),t("strong",[e._v("ExecContract")]),e._v("，以获得最少两个参数。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('if isContract {\n   name := StateName((*block)[0].Info.(uint32), lexem.Value.(string))\n   for j := len(*block) - 1; j >= 0; j-- {\n      topblock := (*block)[j]\n      if topblock.Type == ObjContract {\n            if topblock.Info.(*ContractInfo).Used == nil {\n                 topblock.Info.(*ContractInfo).Used = make(map[string]bool)\n            }\n           topblock.Info.(*ContractInfo).Used[name] = true\n       }\n    }\n    bytecode = append(bytecode, &ByteCode{cmdPush, name})\n    if count == 0 {\n       count = 2\n       bytecode = append(bytecode, &ByteCode{cmdPush, ""})\n       bytecode = append(bytecode, &ByteCode{cmdPush, ""})\n     }\n    count++\n\n}\n')])])]),t("p",[e._v("If we see that there is a square bracket next, then we add the "),t("strong",[e._v("cmdIndex")]),e._v(" command to get the value by the index.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("if (*lexems)[i+1].Type == isLBrack {\n     if objInfo == nil || objInfo.Type != ObjVar {\n         return fmt.Errorf(`unknown variable %s`, lexem.Value.(string))\n     }\n    buffer = append(buffer, &ByteCode{cmdIndex, 0})\n}\n")])])]),t("p",[t("strong",[e._v("CompileBlock")]),e._v(" 函数可以生成对象树和与表达式无关的字节码。编译过程基于有限状态机，就像词法分析器一样，但是有以下不同之处。\n第一，我们不使用符号但使用标记；第二，我们会立即描述所有状态和转换中的 "),t("em",[e._v("states")]),e._v(" 变量。\n它表示一个按标记类型索引的对象数组，每个标记都具有 "),t("em",[e._v("compileState")]),e._v(" 的结构，并在 "),t("em",[e._v("NewState")]),e._v(" 中指定一个新状态。\n如果我们已经解析清楚这是什么结构，那么就可以指定 "),t("em",[e._v("Func")]),e._v(" 字段中处理程序的函数。")]),e._v(" "),t("p",[e._v("让我们以主状态为例回顾一下。")]),e._v(" "),t("p",[e._v("如果我们遇到换行符或注释，那么我们会保持相同的状态。如果我们遇到 "),t("strong",[e._v("contract")]),e._v(" 关键字，那么我们将状态更改为 "),t("em",[e._v("stateContract")]),e._v(" 并开始解析该结构。\n如果我们遇到 "),t("strong",[e._v("func")]),e._v(" 关键字，那么我们将状态更改为 "),t("em",[e._v("stateFunc")]),e._v("。如果接收到其他标记，那么将调用生成错误的函数。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("{ // stateRoot\n   lexNewLine: {stateRoot, 0},\n   lexKeyword | (keyContract << 8): {stateContract | statePush, 0},\n   lexKeyword | (keyFunc << 8): {stateFunc | statePush, 0},\n   lexComment: {stateRoot, 0},\n   0: {errUnknownCmd, cfError},\n},\n")])])]),t("p",[e._v("假设我们遇到了 "),t("strong",[e._v("func")]),e._v(" 关键字，并且我们已将状态更改为 "),t("em",[e._v("stateFunc")]),e._v("。由于函数名必须跟在 "),t("strong",[e._v("func")]),e._v(" 关键字后面，\n因此在更改该函数名时，我们将保持相同的状态。对于所有其他标记，我们生成相应的错误。\n如果我们在标记标识符中获取了函数名称，那么我们转到 "),t("em",[e._v("stateFParams")]),e._v(" 状态，其中我们可以获取函数的参数。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("{ // stateFunc\n    lexNewLine: {stateFunc, 0},\n    lexIdent: {stateFParams, cfNameBlock},\n    0: {errMustName, cfError},\n},\n")])])]),t("p",[e._v("上述操作的同时，我们将调用 "),t("strong",[e._v("fNameBlock")]),e._v(" 函数。应该注意的是，"),t("em",[e._v("块Block")]),e._v(" 结构是使用 "),t("em",[e._v("statePush")]),e._v(" 标记创建的，\n在这里我们从缓冲区中获取它并填充我们需要的数据。"),t("strong",[e._v("fNameBlock")]),e._v(" 函数适用于合约和函数(包括嵌套在其中的函数和合约)。\n它使用相应的结构填充 "),t("em",[e._v("Info")]),e._v(" 字段，并将其自身写入父块的 "),t("em",[e._v("Objects")]),e._v(" 中。这样以便我们可以通过指定的名称调用该函数或合约。\n同样，我们为所有状态和变量创建对应的函数。这些函数通常非常小，并且在构造虚拟机树时执行一些工作。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("func fNameBlock(buf *[]*Block, state int, lexem *Lexem) error {\n    var itype int\n\n    prev := (*buf)[len(*buf)-2]\n    fblock := (*buf)[len(*buf)-1]\n   name := lexem.Value.(string)\n   switch state {\n     case stateBlock:\n        itype = ObjContract\n       name = StateName((*buf)[0].Info.(uint32), name)\n       fblock.Info = &ContractInfo{ID: uint32(len(prev.Children) - 1), Name: name,\n           Owner: (*buf)[0].Owner}\n    default:\n       itype = ObjFunc\n       fblock.Info = &FuncInfo{}\n     }\n     fblock.Type = itype\n    prev.Objects[name] = &ObjInfo{Type: itype, Value: fblock}\n    return nil\n}\n")])])]),t("p",[e._v("对于 "),t("strong",[e._v("CompileBlock")]),e._v(" 函数，它只是遍历所有标记并根据 "),t("em",[e._v("states")]),e._v(" 中描述的标记切换状态。几乎所有附加标记对应附加程序代码。")]),e._v(" "),t("blockquote",[t("ul",[t("li",[t("strong",[e._v("statePush")]),e._v(" -- 将 "),t("strong",[e._v("块Block")]),e._v(" 对象添加到对象树中；")]),e._v(" "),t("li",[t("strong",[e._v("statePop")]),e._v(" -- 当块以结束花括号结束时使用；")]),e._v(" "),t("li",[t("strong",[e._v("stateStay")]),e._v(" -- 当更改为新状态时，您需要保留当前标记；")]),e._v(" "),t("li",[t("strong",[e._v("stateToBlock")]),e._v(" -- 转换到 "),t("strong",[e._v("stateBlock")]),e._v(" 状态，用于处理 "),t("em",[e._v("while")]),e._v(" 和 "),t("em",[e._v("if")]),e._v("。当处理完表达式后，需要在大括号内处理块使用；")]),e._v(" "),t("li",[t("strong",[e._v("stateToBody")]),e._v(" -- 转换到 "),t("strong",[e._v("stateBody")]),e._v(" 状态；")]),e._v(" "),t("li",[t("strong",[e._v("stateFork")]),e._v(" -- 保存标记的位置。当表达式以标识符或带有 "),t("code",[e._v("$")]),e._v(" 名称开头时使用，我们可以进行函数调用或赋值；")]),e._v(" "),t("li",[t("strong",[e._v("stateToFork")]),e._v(" -- 用于获取存储在 "),t("strong",[e._v("stateFork")]),e._v(" 中的标记。该标记将传递给进程函数；")]),e._v(" "),t("li",[t("strong",[e._v("stateLabel")]),e._v(" -- 用于插入 "),t("strong",[e._v("cmdLabel")]),e._v(" 指令。*while* 结构需要这个标记；")]),e._v(" "),t("li",[t("strong",[e._v("stateMustEval")]),e._v(" -- 在 "),t("em",[e._v("if")]),e._v(" 和 "),t("em",[e._v("while")]),e._v(" 结构的开头检查条件表达式的可用性。")])])]),e._v(" "),t("p",[e._v("除了 "),t("strong",[e._v("CompileBlock")]),e._v(" 函数，还应该提到 "),t("strong",[e._v("FlushBlock")]),e._v(" 函数。\n但问题是块树是独立于现有虚拟机构建的，更准确地说，我们获取有关虚拟机中存在的函数和合约的信息，但我们将已编译的块收集到一个单独的树中。\n否则，如果在编译期间发生错误，我们必须将虚拟机的状态回滚到以前的状态。因此，我们单独去编译树，但编译成功后必须调用"),t("strong",[e._v("FlushContract")]),e._v("函数。\n这个函数将完成的块树添加到当前虚拟机中。此时编译阶段就完成了。")]),e._v(" "),t("h2",{attrs:{id:"lexical-analyzer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#lexical-analyzer"}},[e._v("#")]),e._v(" 词法分析器 ")]),e._v(" "),t("p",[e._v("词法分析器将传入的字符串处理并形成以下类型的标记序列：")]),e._v(" "),t("blockquote",[t("ul",[t("li",[t("strong",[e._v("lexSys")]),e._v(" - 系统标记，例如："),t("code",[e._v("{}")]),e._v("，"),t("code",[e._v("[]")]),e._v("，"),t("code",[e._v("()")]),e._v("，"),t("code",[e._v(",")]),e._v("，"),t("code",[e._v(".")]),e._v(" 等；")]),e._v(" "),t("li",[t("strong",[e._v("lexOper")]),e._v(" -- 操作标记，例如："),t("code",[e._v("+")]),e._v("，"),t("code",[e._v("-")]),e._v("，"),t("code",[e._v("/")]),e._v("，"),t("code",[e._v("\\")]),e._v("，"),t("code",[e._v("*")]),e._v("；")]),e._v(" "),t("li",[t("strong",[e._v("lexNumber")]),e._v(" -- 数字；")]),e._v(" "),t("li",[t("strong",[e._v("lexident")]),e._v(" -- 标识符；")]),e._v(" "),t("li",[t("strong",[e._v("lexNewline")]),e._v(" -- 换行符；")]),e._v(" "),t("li",[t("strong",[e._v("lexString")]),e._v(" -- 字符串；")]),e._v(" "),t("li",[t("strong",[e._v("lexComment")]),e._v(" -- 注释；")]),e._v(" "),t("li",[t("strong",[e._v("lexKeyword")]),e._v(" -- 关键字；")]),e._v(" "),t("li",[t("strong",[e._v("lexType")]),e._v(" -- 类型；")]),e._v(" "),t("li",[t("strong",[e._v("lexExtend")]),e._v(" -- 引用外部变量或函数，例如："),t("code",[e._v("$myname")]),e._v("。")])])]),e._v(" "),t("p",[e._v("在当前版本中，初步借助于 "),t("a",{attrs:{href:"#lextable-lextable-go"}},[e._v("script/lextable/lextable.go")]),e._v(" 文件构造了一个转换表(有限状态机)来解析标记，\n并将其写入 "),t("em",[e._v("lex_table.go")]),e._v(" 文件。通常情况下，您可以脱离该文件初始生成的转换表，可以在启动时立即在内存("),t("code",[e._v("init()")]),e._v(")中创建一个转换表。\n词法分析本身发生在"),t("a",{attrs:{href:"#lex-go"}},[e._v("lex.go")]),e._v(" 文件中的 "),t("strong",[e._v("lexParser")]),e._v("函数中。")]),e._v(" "),t("h3",{attrs:{id:"lextable-lextable-go"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#lextable-lextable-go"}},[e._v("#")]),e._v(" lextable/lextable.go ")]),e._v(" "),t("p",[e._v("在这里我们定义了我们的语言用于操作的字母表，并描述有限状态机根据下一个接收到的符号从一种状态变化到另一种状态。")]),e._v(" "),t("p",[t("em",[e._v("states")]),e._v(" 包含一个状态列表的JSON对象。")]),e._v(" "),t("p",[e._v("除特定符号外，"),t("code",[e._v("d")]),e._v(" 用于表示状态中未指明的所有符号。")]),e._v(" "),t("p",[t("code",[e._v("n")]),e._v(" 代表0x0a，"),t("code",[e._v("s")]),e._v(" 代表空格，"),t("code",[e._v("q")]),e._v(" 代表反引号，"),t("code",[e._v("Q")]),e._v(" 代表双引号，"),t("code",[e._v("r")]),e._v(" 代表字符 >= 128，"),t("code",[e._v("a")]),e._v(" 代表AZ和az，"),t("code",[e._v("1")]),e._v(" 代表1-9。")]),e._v(" "),t("p",[e._v("状态的名称是键，值对象中列出了可能的值。然后，对于每一组，都有一种新的状态需要转换。然后是标记的名称，如果我们需要返回到初始状态，第三个参数是服务标志，它指示了如何处理当前符号。")]),e._v(" "),t("p",[e._v("例如，我们有主状态和传入字符 "),t("code",[e._v("/")]),e._v("，"),t("code",[e._v('"/": ["solidus", "", "push next"],')])]),e._v(" "),t("blockquote",[t("ul",[t("li",[t("strong",[e._v("push")]),e._v(" - 给指令记住它在一个单独的堆栈；")]),e._v(" "),t("li",[t("strong",[e._v("next")]),e._v(" - 转到下一个字符，同时我们将状态更改为\n"),t("strong",[e._v("solidus")]),e._v("，之后，获取下一个角色并查看 "),t("strong",[e._v("solidus")]),e._v(" 的状态。")])])]),e._v(" "),t("p",[e._v("如果下一字符有 "),t("code",[e._v("/")]),e._v(" 或 "),t("code",[e._v("/*")]),e._v("，那么我们转到注释 "),t("strong",[e._v("comment")]),e._v(" 状态，因为它们以 "),t("code",[e._v("//")]),e._v(" 或 "),t("code",[e._v("/*")]),e._v("开头。\n显然，每个注释后续都有不同的状态，因为它们以不同的符号结束。")]),e._v(" "),t("p",[e._v("如果下一字符不是 "),t("code",[e._v("/")]),e._v(" 和 "),t("code",[e._v("*")]),e._v("，那么我们将堆栈中的所有内容记录为 "),t("strong",[e._v("lexOper")]),e._v(" 类型的标记，清除堆栈并返回主状态。")]),e._v(" "),t("p",[e._v("以下模块将状态树转换为一个数值数组，并将其写入 "),t("em",[e._v("lex_table.go")]),e._v(" 文件。")]),e._v(" "),t("p",[e._v("在第一个循环体中：")]),e._v(" "),t("p",[e._v("我们形成有效符号的字母表。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("for ind, ch := range alphabet {\ni := byte(ind)\n")])])]),t("p",[e._v("此外，在 "),t("strong",[e._v("state2int")]),e._v(" 中，我们为每个状态提供了自己的序列标识符。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("state2int := map[string]uint{`main`: 0}\nif err := json.Unmarshal([]byte(states), &data); err == nil {\nfor key := range data {\nif key != `main` {\nstate2int[key] = uint(len(state2int))\n")])])]),t("p",[e._v("当我们遍历所有状态和状态中的每个集合以及该集合中的每个符号时，我们写入一个三字节的数字[新状态标识符（0= main）] + [标记类型（0-没有标记）] + [标记]。")]),e._v(" "),t("p",[t("em",[e._v("table")]),e._v(" 数组的二维性在于它分为状态和来自 "),t("em",[e._v("alphabet")]),e._v(" 数组的34个输入符号，它们以相同的顺序排列。")]),e._v(" "),t("p",[e._v("我们处于 "),t("em",[e._v("table")]),e._v(" 零行上的 "),t("em",[e._v("main")]),e._v(" 状态。取第一个字符，在 "),t("em",[e._v("alphabet")]),e._v(" 数组中查找其索引，并从给定索引的列中获取值。\n从接收到的值开始，我们在低位字节接收标记。如果解析完成，第二个字节表示接收到的标记类型。在第三个字节中，我们接收下一个新状态的索引。")]),e._v(" "),t("p",[e._v("所有这些在 "),t("em",[e._v("lex.go")]),e._v(" 中的 "),t("strong",[e._v("lexParser")]),e._v(" 函数中有更详细的描述。")]),e._v(" "),t("p",[e._v("如果想要添加一些新字符，则需要将它们添加到 "),t("em",[e._v("alphabet")]),e._v(" 数组并增加 "),t("em",[e._v("AlphaSize")]),e._v(" 常量。\n如果要添加新的符号组合，则应在状态中对其进行描述，类似于现有选项。在此之后，运行 "),t("em",[e._v("lextable.go")]),e._v(" 文件来更新 "),t("em",[e._v("lex_table.go")]),e._v(" 文件。")]),e._v(" "),t("h3",{attrs:{id:"lex-go"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#lex-go"}},[e._v("#")]),e._v(" lex.go ")]),e._v(" "),t("p",[t("strong",[e._v("lexParser")]),e._v("\n函数直接生成词法分析，并根据传入的字符串返回一个已接收标记的数组。让我们分析标记的结构。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("type Lexem struct {\n   Type uint32 // Type of the lexem\n   Value interface{} // Value of lexem\n   Line uint32 // Line of the lexem\n   Column uint32 // Position inside the line\n}\n")])])]),t("ul",[t("li",[t("strong",[e._v("Type")]),e._v(" -- 标记类型。它有以下值之一："),t("code",[e._v("lexSys, lexOper, lexNumber, lexIdent, lexString, lexComment, lexKeyword, lexType, lexExtend")]),e._v("；")]),e._v(" "),t("li",[t("strong",[e._v("Value")]),e._v(" -- 标记的值。值的类型取决于标记类型，让我们更详细地分析一下：\n"),t("ul",[t("li",[t("strong",[e._v("lexSys")]),e._v(" -- 包括括号，逗号等。在这种情况下，"),t("code",[e._v("Type = ch << 8 | lexSys")]),e._v("，请参阅 "),t("code",[e._v("isLPar ... isRBrack")]),e._v(" 常量，该值为uint32位；")]),e._v(" "),t("li",[t("strong",[e._v("lexOper")]),e._v(" -- 值以uint32的形式表示等价的字符序列。请参阅 "),t("code",[e._v("isNot ... isOr")]),e._v(" 常量；")]),e._v(" "),t("li",[t("strong",[e._v("lexNumber")]),e._v(" -- 数字存储为 "),t("em",[e._v("int64")]),e._v(" 或 "),t("em",[e._v("float64")]),e._v("。如果数字有一个小数点，那么为 "),t("em",[e._v("float64")]),e._v("；")]),e._v(" "),t("li",[t("strong",[e._v("lexIdent")]),e._v(" -- 标识符存储为 "),t("em",[e._v("字符串string")]),e._v("；")]),e._v(" "),t("li",[t("strong",[e._v("lexNewLine")]),e._v(" -- 换行符。还用于计算行和标记位置；")]),e._v(" "),t("li",[t("strong",[e._v("lexString")]),e._v(" -- 行存储为 "),t("em",[e._v("字符串string")]),e._v("；")]),e._v(" "),t("li",[t("strong",[e._v("lexComment")]),e._v(" -- 注释存储为 "),t("em",[e._v("字符串string")]),e._v("；")]),e._v(" "),t("li",[t("strong",[e._v("lexKeyword")]),e._v(" -- 关键字仅存储相应的索引，请参阅 "),t("code",[e._v("keyContract ... keyTail")]),e._v(" 常量。在这种情况下 "),t("code",[e._v("Type = KeyID << 8 | lexKeyword")]),e._v("。\n另外，应该注意的是，"),t("code",[e._v("true,false,nil")]),e._v(" 关键字会立即转换为 "),t("strong",[e._v("lexNumber")]),e._v(" 类型的标记，并使用相应的 "),t("code",[e._v("bool")]),e._v(" 和 "),t("code",[e._v("intreface {}")]),e._v(" 类型；")]),e._v(" "),t("li",[t("strong",[e._v("lexType")]),e._v(" -- 该值包含相应的 "),t("code",[e._v("reflect.Type")]),e._v(" 类型值；")]),e._v(" "),t("li",[t("strong",[e._v("lexExtend")]),e._v(" -- 以美元符号 "),t("code",[e._v("$")]),e._v(" 开头的标识符。这些变量和函数从外部传递，因此分配给特殊类型的标记。该值包含字符串形式的名称，开头没有美元符号。")])])]),e._v(" "),t("li",[t("strong",[e._v("Line")]),e._v(" -- 标记所在行；")]),e._v(" "),t("li",[t("strong",[e._v("Column")]),e._v(" -- 标记的行内位置。")])]),e._v(" "),t("p",[e._v("让我们详细分析 "),t("strong",[e._v("lexParser")]),e._v(" 函数。"),t("strong",[e._v("todo")]),e._v(" 函数根据当前状态和传入符号，查找字母表中的符号索引，并从转换表中获取一个新状态、标记标识符(如果有的话)和其他标记。\n解析本身包括对每下一个字符依次调用 "),t("strong",[e._v("todo")]),e._v(" 函数，并切换到新的状态。一旦接收到标记，我们就在输出准则中创建相应的标记并继续解析。\n应该注意的是，在解析过程中，我们不将标记符号累积到单独的堆栈或数组中，因为我们只是保存标记开始的偏移量。获得标记之后，我们将下一个标记的偏移量移动到当前解析位置。")]),e._v(" "),t("p",[e._v("剩下的就是检查解析中使用的词法状态标志：")]),e._v(" "),t("blockquote",[t("ul",[t("li",[t("strong",[e._v("lexfPush")]),e._v(" -- 该标志意味着我们开始在一个新的标记中累积符号；")]),e._v(" "),t("li",[t("strong",[e._v("lexfNext")]),e._v(" -- 必须将该字符添加到当前标记；")]),e._v(" "),t("li",[t("strong",[e._v("lexfPop")]),e._v(" -- 接收标记完成，通常，使用该标志我们有解析标记的标识符类型；")]),e._v(" "),t("li",[t("strong",[e._v("lexfSkip")]),e._v(" -- 该标志用于从解析中排除字符，例如，字符串中的控件斜线为 "),t("code",[e._v('\\n \\r \\"')]),e._v("。它们会在该词法分析阶段自动替换。")])])]),e._v(" "),t("h2",{attrs:{id:"needle-language"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#needle-language"}},[e._v("#")]),e._v(" needle 语言 ")]),e._v(" "),t("h3",{attrs:{id:"lexemes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#lexemes"}},[e._v("#")]),e._v(" 词法 ")]),e._v(" "),t("p",[e._v("程序的源代码必须采用UTF-8编码。")]),e._v(" "),t("p",[e._v("以下词法类型:")]),e._v(" "),t("blockquote",[t("ul",[t("li",[t("strong",[e._v("关键字")]),e._v(" - "),t("code",[e._v("action")]),e._v(", "),t("code",[e._v("break")]),e._v(", "),t("code",[e._v("conditions")]),e._v(", "),t("code",[e._v("continue")]),e._v(",\n"),t("code",[e._v("contract")]),e._v(", "),t("code",[e._v("data")]),e._v(", "),t("code",[e._v("else")]),e._v(", "),t("code",[e._v("error")]),e._v(", "),t("code",[e._v("false")]),e._v(", "),t("code",[e._v("func")]),e._v(", "),t("code",[e._v("if")]),e._v(",\n"),t("code",[e._v("info")]),e._v(", "),t("code",[e._v("nil")]),e._v(", "),t("code",[e._v("return")]),e._v(", "),t("code",[e._v("settings")]),e._v(", "),t("code",[e._v("true")]),e._v(", "),t("code",[e._v("var")]),e._v(", "),t("code",[e._v("warning")]),e._v(",\n"),t("code",[e._v("while")]),e._v("；")]),e._v(" "),t("li",[t("strong",[e._v("数字")]),e._v(" - 只接收十进制数字。有两种基本类型: "),t("strong",[e._v("int")]),e._v(" 和 "),t("strong",[e._v("float")]),e._v("。 如果数字有一个小数点，它就变成了浮点数\n"),t("strong",[e._v("float")]),e._v("。*"),t("em",[e._v("int")]),e._v("* 类型等价于golang中的 "),t("strong",[e._v("int64")]),e._v("。*"),t("em",[e._v("float")]),e._v("*\n类型等价于golang中的 "),t("strong",[e._v("float64")]),e._v("。")]),e._v(" "),t("li",[t("strong",[e._v("字符串")]),e._v(" - 字符串可以用双引号 ("),t("code",[e._v('"a string"')]),e._v(") 或反引号(\n"),t("code",[e._v("\\`a string\\")]),e._v('[)。这两种类型的字符串都可以包含换行符。双引号中的字符串可以包含双引号、换行符和用斜杠转义的回车符。例如，\n]{.title-ref}["This is a "first string".rnThis is a second\nstring."]{.title-ref}`。')]),e._v(" "),t("li",[t("strong",[e._v("注释")]),e._v(" - 有两种类型的评论。单行注释使用两个斜杠符号\n("),t("code",[e._v("//")]),e._v(")。例如，"),t("code",[e._v("// 这是单行注释")]),e._v("。多行注释使用斜杠和星号符号，可以跨越多行。例如，"),t("code",[e._v("/* 这是多行注释 */")]),e._v(".")]),e._v(" "),t("li",[t("strong",[e._v("标识符")]),e._v(" -\n由a-z和A-Z字母、UTF-8符号、数字和下划线组成的变量和函数的名称。名称可以以字母、下划线、"),t("code",[e._v("@")]),e._v("\n或 "),t("code",[e._v("$")]),e._v(" 符号开头。以 "),t("code",[e._v("$")]),e._v(" 开头的名称为在 "),t("strong",[e._v("数据部分")]),e._v("\n中定义的变量的名称。以 "),t("code",[e._v("$")]),e._v(" 开头的名称还可以用于定义 "),t("strong",[e._v("条件部分")]),e._v("\n和 "),t("strong",[e._v("操作部分")]),e._v(" 范围内的全局变量。生态系统的合约可以使用 "),t("code",[e._v("@")]),e._v("\n符号来调用。例如: "),t("code",[e._v("@1NewTable(...)")]),e._v("。")])])]),e._v(" "),t("h3",{attrs:{id:"types"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#types"}},[e._v("#")]),e._v(" 类型 ")]),e._v(" "),t("p",[e._v("在 needle 类型旁边指定了相应的golang类型。")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("bool")]),e._v(" - bool，默认值为 "),t("strong",[e._v("false")]),e._v("；")]),e._v(" "),t("li",[t("strong",[e._v("bytes")]),e._v(" - []byte{}，默认值为空字节数组；")]),e._v(" "),t("li",[t("strong",[e._v("int")]),e._v(" - int64，默认值为 "),t("strong",[e._v("0")]),e._v("；")]),e._v(" "),t("li",[t("strong",[e._v("address")]),e._v(" - uint64，默认值为 "),t("strong",[e._v("0")]),e._v("；")]),e._v(" "),t("li",[t("strong",[e._v("array")]),e._v(" - []interface{}，默认值为空数组；")]),e._v(" "),t("li",[t("strong",[e._v("map")]),e._v(" - map[string]interface{}，默认值为空对象数组；")]),e._v(" "),t("li",[t("strong",[e._v("money")]),e._v(" - decimal.Decimal，默认值为 "),t("strong",[e._v("0")]),e._v("；")]),e._v(" "),t("li",[t("strong",[e._v("float")]),e._v(" - float64，默认值为 "),t("strong",[e._v("0")]),e._v("；")]),e._v(" "),t("li",[t("strong",[e._v("string")]),e._v(" - string，默认值为空字符串；")]),e._v(" "),t("li",[t("strong",[e._v("file")]),e._v(" - map[string]interface{}，默认值为空对象数组。")])]),e._v(" "),t("p",[e._v("这些类型的变量用 "),t("code",[e._v("var")]),e._v(" 关键字定义。例如，"),t("code",[e._v("var var1, var2 int")]),e._v("。当这样定义一个变量时，它将获得其类型的默认值。")]),e._v(" "),t("p",[e._v("所有变量值都具有 "),t("em",[e._v("interface{}")]),e._v(" 类型，然后将它们分配给所需的golang类型。\n因此，例如 "),t("em",[e._v("array")]),e._v(" 和 "),t("em",[e._v("map")]),e._v(" 类型是golang类型 "),t("em",[e._v("[]interface{}")]),e._v(" 和 "),t("em",[e._v("map[string]interface{}")]),e._v("。\n这两种类型的数组都可以包含任何类型的元素。")]),e._v(" "),t("h3",{attrs:{id:"expressions"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#expressions"}},[e._v("#")]),e._v(" 表达式 ")]),e._v(" "),t("p",[e._v("表达式可以包含算术运算、逻辑运算和函数调用。根据操作优先级从左到右计算所有表达式。如果操作优先级相同，评估也从左到右。")]),e._v(" "),t("p",[e._v("从最高优先级到最低优先级的操作列表:")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("函数调用和圆括号")]),e._v(" - 调用函数时，将从左到右计算传递的参数；")]),e._v(" "),t("li",[t("strong",[e._v("一元运算")]),e._v(" - 逻辑否定 "),t("code",[e._v("!")]),e._v(" 和算术符号变化 "),t("code",[e._v("-")]),e._v("；")]),e._v(" "),t("li",[t("strong",[e._v("乘法和除法")]),e._v(" - 算术乘法 "),t("code",[e._v("*")]),e._v(" 和除法 "),t("code",[e._v("/")]),e._v("；")]),e._v(" "),t("li",[t("strong",[e._v("加法和减法")]),e._v(" - 算术加法 "),t("code",[e._v("+")]),e._v(" 和减法 "),t("code",[e._v("-")]),e._v("；")]),e._v(" "),t("li",[t("strong",[e._v("逻辑比较")]),e._v(" - "),t("code",[e._v(">= > > >=")]),e._v("；")]),e._v(" "),t("li",[t("strong",[e._v("逻辑相等和不相等")]),e._v(" - "),t("code",[e._v("== !=")]),e._v("；")]),e._v(" "),t("li",[t("strong",[e._v("逻辑与")]),e._v(" - "),t("code",[e._v("&&")]),e._v("；")]),e._v(" "),t("li",[t("strong",[e._v("逻辑或")]),e._v(" - "),t("code",[e._v("||")]),e._v("。")])]),e._v(" "),t("p",[e._v("当评估逻辑与和逻辑或时，在任何情况下都会计算表达式的两侧。")]),e._v(" "),t("p",[e._v("needle 在编译时没有类型检查。在评估操作数时，会尝试将类型转换为更复杂的类型。\n复杂度顺序的类型可以按照如下："),t("code",[e._v("string, int, float, money")]),e._v("，仅实现了部分类型转换。\n字符串类型支持加法操作，结果会使得字符串连接。例如，"),t("code",[e._v("string + string = string, money - int = money, int * float = float")]),e._v("。")]),e._v(" "),t("p",[e._v("对于函数，在执行时会对 "),t("code",[e._v("string")]),e._v(" 和 "),t("code",[e._v("int")]),e._v(" 类型执行类型检查。")]),e._v(" "),t("p",[t("strong",[e._v("array")]),e._v(" 和 "),t("strong",[e._v("map")]),e._v(" 类型可以通过索引来寻址。\n对于 "),t("strong",[e._v("array")]),e._v(" 类型，必须将 "),t("strong",[e._v("int")]),e._v(" 值指定为索引。对于 "),t("strong",[e._v("map")]),e._v(" 类型，必须指定变量或 "),t("strong",[e._v("string")]),e._v("值。\n如果将值赋给索引大于当前最大索引的 "),t("strong",[e._v("array")]),e._v("元素，则将向数组添加空元素。这些元素的初始化值为 "),t("strong",[e._v("nil")]),e._v(" 。例如: .. code:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('var my array\nmy[5] = 0\nvar mymap map\nmymap["index"] = my[3]\n')])])]),t("p",[e._v("在条件逻辑值的表达式中（例如"),t("code",[e._v("if，while，&&，||，!")]),e._v("），类型会自动转换为逻辑值，如果类型不为默认值，则为true。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var mymap map\nvar val string\nif mymap && val {\n...\n}\n")])])]),t("h3",{attrs:{id:"scope"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scope"}},[e._v("#")]),e._v(" 范围 ")]),e._v(" "),t("p",[e._v("大括号指定一个可以包含局部范围变量的块。默认情况下，变量的范围扩展到它自己的块和所有嵌套的块。在一个块中，可以使用现有变量的名称定义一个新变量。在这种情况下，具有相同名称的外部变量不可用。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var a int\na = 3\n{\n   var a int\n   a = 4\n   Println(a) // 4\n}\nPrintln(a) // 3\n")])])]),t("h3",{attrs:{id:"contract-execution"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#contract-execution"}},[e._v("#")]),e._v(" 合约执行 ")]),e._v(" "),t("p",[e._v("当调用合约时，必须将 "),t("strong",[e._v("data")]),e._v(" 部分中定义的参数传递给它。在执行合约之前，虚拟机接收这些参数并将它们分配给相应的变量($Param)。\n然后调用预定义的 "),t("strong",[e._v("conditions")]),e._v(" 函数和 "),t("strong",[e._v("action")]),e._v(" 函数。")]),e._v(" "),t("p",[e._v("合约执行期间发生的错误可分为两种类型：形式错误和环境错误。形式错误使用特殊命令生成："),t("code",[e._v("error, warning, info")]),e._v(" 以及当内置函数返回 "),t("code",[e._v("err")]),e._v(" 不等于 "),t("em",[e._v("nil")]),e._v(" 时。")]),e._v(" "),t("p",[e._v("needle 语言不处理异常。任何错误都会终止合约的执行。由于在执行合约时创建了用于保存变量值的单独堆栈和结构，所以当合约执行完成时，golang垃圾回收机制将自动删除这些数据。")]),e._v(" "),t("h3",{attrs:{id:"backus-naur-form-bnf"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#backus-naur-form-bnf"}},[e._v("#")]),e._v(" 巴科斯范式Backus--Naur Form (BNF) ")]),e._v(" "),t("p",[e._v("在计算机科学中，BNF是一种用于无上下文语法的符号技术，通常用于描述计算中使用的语言的语法。")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("<decimal digit> :")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("'0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'\n")])])])]),e._v(" "),t("li",[t("p",[e._v("<decimal number> :")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("<decimal digit> {<decimal digit>}\n")])])])]),e._v(" "),t("li",[t("p",[e._v("<symbol code> :")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("'''<any symbol>'''\n")])])])]),e._v(" "),t("li",[t("p",[e._v("<real number> :")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("['-'] <decimal number'.'[<decimal number>]\n")])])])]),e._v(" "),t("li",[t("p",[e._v("<integer number> :")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("['-'] <decimal number> | <symbol code>\n")])])])]),e._v(" "),t("li",[t("p",[e._v("<number> :")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("'<integer number> | <real number>'\n")])])])]),e._v(" "),t("li",[t("p",[e._v("<letter> :")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("'A' | 'B' | ... | 'Z' | 'a' | 'b' | ... | 'z' | 0x80 | 0x81 | ... | 0xFF\n")])])])]),e._v(" "),t("li",[t("p",[e._v("<space> :")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("'0x20'\n")])])])]),e._v(" "),t("li",[t("p",[e._v("<tabulation> :")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("'0x09'\n")])])])]),e._v(" "),t("li",[t("p",[e._v("<newline> :")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("'0x0D 0x0A'\n")])])])]),e._v(" "),t("li",[t("p",[e._v("<special symbol> :")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("'!' | '\"' | '$' | ''' | '(' | ')' | '\\*' | '+' | ',' | '-' | '.' | '/' | '<' | '=' | '>' | '[' | '\\\\' | ']' | '_' | '|' | '}' | '{' | <tabulation> | <space> | <newline>\n")])])])]),e._v(" "),t("li",[t("p",[e._v("<symbol> :")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("<decimal digit> | <letter> | <special symbol>\n")])])])]),e._v(" "),t("li",[t("p",[e._v("<name> :")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("(<letter> | '_') {<letter> | '_' | <decimal digit>}\n")])])])]),e._v(" "),t("li",[t("p",[e._v("<function name> :")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("<name>\n")])])])]),e._v(" "),t("li",[t("p",[e._v("<variable name> :")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("<name>\n")])])])]),e._v(" "),t("li",[t("p",[e._v("<type name> :")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("<name>\n")])])])]),e._v(" "),t("li",[t("p",[e._v("<string symbol> :")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("<tabulation> | <space> | '!' | '#' | ... | '[' | ']' | ... \n")])])])]),e._v(" "),t("li",[t("p",[e._v("<string element> :")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("{<string symbol> | '\\\"' | '\\n' | '\\r' }\n")])])])]),e._v(" "),t("li",[t("p",[e._v("<string> :")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("'\"' { <string element> } '\"' | '\\`'  { <string element> } '\\`'\n")])])])]),e._v(" "),t("li",[t("p",[e._v("<assignment operator> :")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("'=' \n")])])])]),e._v(" "),t("li",[t("p",[e._v("<unary operator> :")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("'-'\n")])])])]),e._v(" "),t("li",[t("p",[e._v("<binary operator> :")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("'==' | '!=' | '>' | '<' | '<=' | '>=' | '&&' | '||' | '\\*' | '/' | '+' | '-' \n")])])])]),e._v(" "),t("li",[t("p",[e._v("<operator> :")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("<assignment operator> | <unary operator> | <binary operator>\n")])])])]),e._v(" "),t("li",[t("p",[e._v("<parameters> :")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("<expression> {','<expression>}\n")])])])]),e._v(" "),t("li",[t("p",[e._v("<contract call> :")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("<contract name> '(' [<parameters>] ')'\n")])])])]),e._v(" "),t("li",[t("p",[e._v("<function call> :")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("<contract call> [{'.' <name> '(' [<parameters>] ')'}]\n")])])])]),e._v(" "),t("li",[t("p",[e._v("<block contents> :")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("<block command> {<newline><block command>}\n")])])])]),e._v(" "),t("li",[t("p",[e._v("<block> :")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("'{'<block contents>'}'\n")])])])]),e._v(" "),t("li",[t("p",[e._v("<block command> :")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("(<block> | <expression> | <variables definition> | <if> | <while> | break | continue | return)\n")])])])]),e._v(" "),t("li",[t("p",[e._v("<if> :")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("'if <expression><block> [else <block>]'\n")])])])]),e._v(" "),t("li",[t("p",[e._v("<while> :")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("'while <expression><block>'\n")])])])]),e._v(" "),t("li",[t("p",[e._v("<contract> :")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("'contract <name> '{'[<data section>] {<function>} [<conditions>] [<action>]'}''\n")])])])]),e._v(" "),t("li",[t("p",[e._v("<data section> :")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("'data '{' {<data parameter><newline>} '}''\n")])])])]),e._v(" "),t("li",[t("p",[e._v("<data parameter> :")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("<variable name> <type name> '\"'{<tag>}'\"' \n")])])])]),e._v(" "),t("li",[t("p",[e._v("<tag> :")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("'optional | image | file | hidden | text | polymap | map | address | signature:<name>'\n")])])])]),e._v(" "),t("li",[t("p",[e._v("<conditions> :")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("'conditions <block>'\n")])])])]),e._v(" "),t("li",[t("p",[e._v("<action> :")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("'action <block>'\n")])])])]),e._v(" "),t("li",[t("p",[e._v("<function> :")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("'func <function name>'('[<variable description>{','<variable description>}]')'[{<tail>}] [<type name>] <block>'\n")])])])]),e._v(" "),t("li",[t("p",[e._v("<variable description> :")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("<variable name> {',' <variable name>} <type name>\n")])])])]),e._v(" "),t("li",[t("p",[e._v("<tail> :")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("'.'<function name>'('[<variable description>{','<variable description>}]')'\n")])])])]),e._v(" "),t("li",[t("p",[e._v("<variables definition> :")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("'var <variable description>{','<variable description>}'\n")])])])])])])}),[],!1,null,null,null);t.default=n.exports}}]);