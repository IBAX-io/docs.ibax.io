(window.webpackJsonp=window.webpackJsonp||[]).push([[110],{493:function(e,n,t){"use strict";t.r(n);var a=t(51),o=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"restful-api-v2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#restful-api-v2"}},[e._v("#")]),e._v(" RESTful API v2")]),e._v(" "),t("p",[e._v("All functions provided by Weaver, including authentication, ecosystem data reception, error handling, database table operations, pages and contracts implementation are available by using IBAX's REST API.")]),e._v(" "),t("p",[e._v("With REST API, developers can access all platform functions without using Weaver.")]),e._v(" "),t("p",[e._v("API command calls are executed by addressing /api/v2/command/[param], where command is the command name and param is an additional parameter. The request parameters must be sent in the format Content-Type: x-www-form-urlencoded. The server response result is in JSON format.")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("Error handling\n–Error list")])]),e._v(" "),t("li",[t("p",[e._v("Authentification\n–getuid\n–login")])]),e._v(" "),t("li",[t("p",[e._v("Service commands\n–version")])]),e._v(" "),t("li",[t("p",[e._v("Data request functions\n–balance\n–blocks\n–detailed_blocks\n–/data/{table}/{id}/{column}/{hash}\n–keyinfo")])]),e._v(" "),t("li",[t("p",[e._v("Getting metrics\n–keys\n–blocks\n–transactions\n–ecosystems\n–fullnodes")])]),e._v(" "),t("li",[t("p",[e._v("Ecosystem\n–ecosystemname\n–ecosystems\n–appparams/{appID}\n–appparam/{appid}/{name}\n–ecosystemparams\n–ecosystemparam/{name}\n–tables/[?limit=…&offset=…]\n–table/{name}\n–list/{name}[?limit=…&offset=…&columns=…]\n–sections[?limit=…&offset=…&lang=]\n–row/{name}/{id}[?columns=]\n–systemparams\n–history/{name}/{id}\n–interface/{page|menu|block}/{name}")])]),e._v(" "),t("li",[t("p",[e._v("Contract functions\n–contracts[?limit=…&offset=…]\n–contract/{name}\n–sendTX\n–txstatus\n–txinfo/{hash}\n–txinfoMultiple/\n–/page/validators_count/{name}\n–content/menu|page/{name}\n–content/source/{name}\n–content/hash/{name}\n–content\n–maxblockid\n–block/{id}\n–avatar/{ecosystem}/{member}\n–config/centrifugo\n–updnotificator")])])]),e._v(" "),t("p",[e._v("Error handling")]),e._v(" "),t("p",[e._v("If the request is executed successfully, a status code 200 is returned. If an error occurs, in addition to the error status, a JSON object with the following fields will be returned:")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("error\nError identifier.")])]),e._v(" "),t("li",[t("p",[e._v("msg\nThe text returned in case of an error.")])]),e._v(" "),t("li",[t("p",[e._v("params\nAdditional parameters of the error, which may be contained in the text returned in case of an error.")])])]),e._v(" "),t("p",[e._v("Response example")]),e._v(" "),t("p",[e._v('400 (Bad request)\nContent-Type: application/json\n{\n"err": "E_INVALIDWALLET",\n"msg": "Wallet 1234-5678-9012-3444-3488 is not valid",\n"params": ["1234-5678-9012-3444-3488"]\n}\nError list\nE_CONTRACT\ncontract %s does not exist\nE_DBNIL')]),e._v(" "),t("p",[e._v("Blank database")]),e._v(" "),t("p",[e._v("E_DELETEDKEY")]),e._v(" "),t("p",[e._v("Account address suspended")]),e._v(" "),t("p",[e._v("E_ECOSYSTEM\nEcosystem %d does not exist\nE_EMPTYPUBLIC\nInvalid public key for the account\nE_KEYNOTFOUND\nAccount address not found\nE_HASHWRONG\nWrong hash\nE_HASHNOTFOUND\nHas not found\nE_HEAVYPAGE\nToo many pages loaded\nE_INVALIDWALLET\nInvalid wallet address %s\nE_LIMITTXSIZE\nSize of a transaction out of limit\nE_NOTFOUND\nPage or menu content not found\nE_PARAMNOTFOUND\nParameter not found\nE_PERMISSION\nNo permission\nE_QUERY\nDatabase query error\nE_RECOVERED\nThe API has an panic error.\nReturn an error if has a panic error.\nIt means you had encountered a bug to be located and fixed.\nE_SERVER\nServer error.\nIf there is an error in the golang library function, it returns. The msg field contains the text in returned in case of an error.\nAn E_SERVER error may occur in response to any command. If it occurs due to incorrect input parameters, you can change it to a related error. In another case, this error reports invalid operation or incorrect system configuration, which requires a more detailed investigation report.\nE_SIGNATURE\nIncorrect signature\nE_STATELOGIN\n%s is not a member of the ecosystem %s\nE_TABLENOTFOUND\nTable %s not found\nE_TOKENEXPIRED\nSession %s has expired\nE_UNAUTHORIZED\nUnauthorized.\nIf not logged in or the session expired, any command except getuid, login will return an E_UNAUTHORIZED error.\nE_UNKNOWNUID\nUnknown UID\nE_UPDATING\nThe node is updating the blockchain\nE_STOPPING\nThe node has stopped\nE_NOTIMPLEMENTED\nNot yet implemented\nE_BANNED\nThe account address is forbidden in %s\nE_CHECKROLE\nAccess denied\nAPIs unavailable to CLB")]),e._v(" "),t("p",[e._v("Interface request unavailable to the CLB node:")]),e._v(" "),t("ul",[t("li",[e._v("metrics")]),e._v(" "),t("li",[e._v("txinfo")]),e._v(" "),t("li",[e._v("txinfoMultiple")]),e._v(" "),t("li",[e._v("appparam")]),e._v(" "),t("li",[e._v("appparams")]),e._v(" "),t("li",[e._v("appcontent")]),e._v(" "),t("li",[e._v("history")]),e._v(" "),t("li",[e._v("balance")]),e._v(" "),t("li",[e._v("block")]),e._v(" "),t("li",[e._v("maxblockid")]),e._v(" "),t("li",[e._v("blocks")]),e._v(" "),t("li",[e._v("detailed_blocks")]),e._v(" "),t("li",[e._v("ecosystemparams")]),e._v(" "),t("li",[e._v("systemparams")]),e._v(" "),t("li",[e._v("ecosystems")]),e._v(" "),t("li",[e._v("ecosystemparam")]),e._v(" "),t("li",[e._v("ecosystemname")]),e._v(" "),t("li",[e._v("walletHistory")]),e._v(" "),t("li",[e._v("tx_record\nAuthentication\nJWT token is used for authentication. After receiving the JWT token, it must be placed in each request header: Authorization: Bearer TOKEN_HERE.\ngetuid\nGET/ returns a unique value, signed it with the private key, and then sent it back to the server using the login command.\nTo generate a temporary JWT token, you need to pass the token to Authorization when calling login.\nRequest\nGET\n/api/v2/getuid\nResponse")]),e._v(" "),t("li",[e._v("uid\nSignature numbers.")]),e._v(" "),t("li",[e._v("token\nTemporary token passed during login.\nLifetime of a temporary token is 5 seconds.")]),e._v(" "),t("li",[e._v("network_id\nServer identifier.\nIf authorization is not required, the following information will be returned:")]),e._v(" "),t("li",[e._v("expire\nExpiration time.")]),e._v(" "),t("li",[e._v("ecosystem\nEcosystem ID.")]),e._v(" "),t("li",[e._v("key_id\nAccount address.")]),e._v(" "),t("li",[e._v('address\nWallet address XXXX-XXXX-.....-XXXX.\nResponse example\n200 (OK)\nContent-Type: application/json\n{\n"uid": "4999317241855959593",\n"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9........I7LY6XX4IP12En6nr8UPklE9U4qicqg3K9KEzGq_8zE"\n"network_id": "4717243765193692211"\n}\nError response\nE_SERVER\nlogin\nPOST/ Authentication of user identity.\nThe getuid command should be called first to receive a unique value and sign it. The temporary JWT token of getuid needs to be passed in the request header.\nIf the request was successful, the token received in the response is included in Authorization.\nRequest\nPOST\n/api/v2/login')]),e._v(" "),t("li",[e._v("[ecosystem]\nEcosystem ID.\nIf not specified, ID of the first ecosystem by default.")]),e._v(" "),t("li",[e._v("[expire]\nLifetime of the JWT token, in seconds, 28800 by default.")]),e._v(" "),t("li",[e._v("[pubkey]\nHexadecimal public key of the account.")]),e._v(" "),t("li",[e._v("[key_id]\nAccount address XXXX-...-XXXX.\nUse this parameter when the public key is already stored in the blockchain. It cannot be used with the pubkey parameter at the same time.")]),e._v(" "),t("li",[e._v("signature\nUID signature received through getuid.\nResponse")]),e._v(" "),t("li",[e._v("token\nJWT token.")]),e._v(" "),t("li",[e._v("ecosystem\nEcosystem ID.")]),e._v(" "),t("li",[e._v("key_id\nAccount address ID")]),e._v(" "),t("li",[e._v("address\nWallet address XXXX-XXXX-.....-XXXX.")]),e._v(" "),t("li",[e._v("notify_key\nNotification ID.")]),e._v(" "),t("li",[e._v("isnode\nWhether the account address is the owner of the node. Value: true,false.")]),e._v(" "),t("li",[e._v("isowner\nWhether the account address is the creator of the ecosystem. Value: true,false.")]),e._v(" "),t("li",[e._v('obs\nWhether the registered ecosystem is CLB. Value: true,false.\nResponse example\n200 (OK)\nContent-Type: application/json\n{\n"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9........AHDRDqDFBoWEHw-9lfIcLobehvNEeIYBB4BIb5J72aQ"\n"ecosystem":"1",\n"key_id":"54321",\n"address": "4321-....-2223"\n}\nError response\nE_SERVER, E_UNKNOWNUID, E_SIGNATURE, E_STATELOGIN, E_EMPTYPUBLIC\nService commands\nversion\nGET/ Returns the version of the current server.\nLogin authorization is not required for this request.\nRequest\nGET\n/api/v2/version\nResponse example\n200 (OK)\nContent-Type: application/json\n"1.2.6"\nData request functions\nbalance\nGET/ Request the balance of the account address in the current ecosystem.\nRequest\nGET\n/api/v2/balance/{wallet}')]),e._v(" "),t("li",[e._v("wallet\nAddress identifier. You can specify it in any format int64, uint64, XXXX-...-XXXX. This address will be queried in the ecosystem the user is currently logged in.\nResponse")]),e._v(" "),t("li",[e._v("amount\nAccount balance of the smallest unit.")]),e._v(" "),t("li",[e._v('money\nAccount balance.\nResponse example\n200 (OK)\nContent-Type: application/json\n{\n"amount": "877450000000000",\n"money": "877.45"\n}\nError response\nE_SERVER, E_INVALIDWALLET\nblocks\nGET/ returns a list containing additional information related to transactions in each block.\nLogin authorization is not required for this request.\nRequest\nGET\n/api/v2/blocks')]),e._v(" "),t("li",[e._v("block_id\nHeight of the starting block to be queried.")]),e._v(" "),t("li",[e._v("count\nNumber of blocks\nResponse")]),e._v(" "),t("li",[e._v('Block height\nThe list of transactions in the block and the additional information of each transaction:\n–hash\nTransaction hash.\n–contract_name\nContract name.\n–params\nAn array of contract parameters.\n–key_id\nFor the first block, account address of the first block that signed the transaction.\nFor all other blocks, address of the account that signed the transaction.\nResponse example\n200 (OK)\nContent-Type: application/json\n{"1":\n[{"hash":"O1LhrjKznrYa0z5n5cej6p5Y1j5E9v/oV27VPRJmfgo=",\n"contract_name":"",\n"params":null,\n"key_id":-118432674655542910}]\n}\nError response\nE_SERVER, E_NOTFOUND\ndetailed_blocks\nGET/ returns a list containing detailed additional information related to transactions in each block.\nLogin authorization is not required for this request.\nRequest\nGET\n/api/v2/detailed_blocks\nResponse')]),e._v(" "),t("li",[e._v("Block height\n–Block header\nThe block header contains the following fields:")]),e._v(" "),t("li",[e._v("block_id\nBlock height.")]),e._v(" "),t("li",[e._v("time\nBlock generation timestamp.")]),e._v(" "),t("li",[e._v("key_id\nThe address of the account that signed the block.")]),e._v(" "),t("li",[e._v("node_position\nThe position of the node that generates the block in the list of honor nodes.")]),e._v(" "),t("li",[e._v("version\nBlock structure version.\n–hash\nBlock hash.\n–node_position\nPosition of the node that generated the block in the list of honor nodes.\n–key_id\nAddress of the account that signed the block.\n–time\nBlock generation timestamp.\n–tx_count\nNumber of transactions in the block.\n–rollback_hash\nBlock rollback hash.\n–mrkl_root\nMerkel tree of transactions of the block.\n–bin_data\nSerialization of the block header, all transactions in the block, the previous block hash, and the private key of the node that generated the block.\n–sys_update\nDoes the block contain transactions to update system parameters.\n–Transaction\nThe list of transactions in the block and the additional information of each transaction:")]),e._v(" "),t("li",[e._v("hash\nTransaction hash.")]),e._v(" "),t("li",[e._v("contract_name\nContract name.")]),e._v(" "),t("li",[e._v("params\nContract parameters.")]),e._v(" "),t("li",[e._v("key_id\nAddress of the account that signed the transaction.")]),e._v(" "),t("li",[e._v("time\nTransaction generation timestamp.")]),e._v(" "),t("li",[e._v('type\nTransaction type.\nResponse example\n200 (OK)\nContent-Type: application/json\n{"1":\n{"header":\n{"block_id":1,\n"time":1551069320,\n"ecosystem_id":0,\n"key_id":-118432674655542910,\n"node_position":0,\n"version":1},\n"hash":"3NxhvswmpGvRdw8HdkrniI5Mx/q14Z4d5hwGKMp6KHI=",\n"ecosystem_id":0,\n"node_position":0,\n"key_id":-118432674655542910,\n"time":1551069320,\n"tx_count":1,\n"rollbacks_hash":"I2JHugpbdMNxBdNW1Uc0XnbiXFtzB74yD9AK5YI5i/k=",\n"mrkl_root":"MTZiMjY2NGJjOWY3MDAyODlhYjkyMDVhZDQwNDgxNzkxMjY1MWJjNjczNDkyZjk5MWI2Y2JkMjAxNTIwYjUyYg==",\n"bin_data":null,\n"sys_update":false,\n"gen_block":false,\n"stop_count":0,\n"transactions":[\n{"hash":"O1LhrjKznrYa0z5n5cej6p5Y1j5E9v/oV27VPRJmfgo=","contract_name":"","params":null,"key_id":0,"time":0,"type":0}]\n}\n}\nError response\nE_SERVER, E_NOTFOUND\n/data/{table}/{id}/{column}/{hash}\nGET/ If the specified hash matches the data in the specified table, field and record, this request will return the data. Otherwise, an error is returned.\nLogin authorization is not required for this request.\nRequest\nGET\n/data/{table}/{id}/{column}/{hash}')]),e._v(" "),t("li",[e._v("table\nTable name.")]),e._v(" "),t("li",[e._v("id\nRecord ID.")]),e._v(" "),t("li",[e._v("column\nField name.")]),e._v(" "),t("li",[e._v("hash\nHash of the requested data.\nResponse\nBinary data\nkeyinfo\nGET/ returns a list of ecosystems, including roles registered with the specified address.\nLogin authorization is not required for this request.\nRequest\nGET\n/api/v2/keyinfo/{key_id}")]),e._v(" "),t("li",[e._v("key_id\nAddress identifier, you can specify it any format int64, uint64, XXXX-...-XXXX.\nRequest queried in all ecosystems.\nResponse")]),e._v(" "),t("li",[e._v("ecosystem\nEcosystem ID.")]),e._v(" "),t("li",[e._v("name\nEcosystem name.")]),e._v(" "),t("li",[e._v('roles\nA list of roles with the id and name fields.\nResponse example\n200 (OK)\nContent-Type: application/json\n[{\n"ecosystem":"1",\n"name":"platform ecosystem",\n"roles":[{"id":"1","name":"Admin"},{"id":"2","name":"Developer"}]\n}]\nError response\nE_SERVER, E_INVALIDWALLET\nGet metrics\nkeys\nGET/ Returns the number of account addresses.\nRequest\nGET\n/api/v2/metrics/keys\nResponse example\n200 (OK)\nContent-Type: application/json\n{\n"count": 28\n}\nblocks\nGET/ Returns the number of blocks.\nRequest\nGET\n/api/v2/metrics/blocks\nResponse example\n200 (OK)\nContent-Type: application/json\n{\n"count": 28\n}\ntransactions\nGET/ Returns the total number of transactions.\nRequest\nGET\n/api/v2/metrics/transactions\nResponse example\n200 (OK)\nContent-Type: application/json\n{\n"count": 28\n}\necosystems\nGET/ Returns the number of ecosystems.\nRequest\nGET\n/api/v2/metrics/ecosystems\nResponse example\n200 (OK)\nContent-Type: application/json\n{\n"count": 28\n}\nfullnodes\nGET/ returns the number of honor nodes.\nGET\n/api/v2/metrics/fullnodes\nResponse example\n200 (OK)\nContent-Type: application/json\n{\n"count": 28\n}\nEcosystem\necosystemname\nGET/ returns the name of the ecosystem by its identifier.\nLogin authorization is not required for this request.\nGET\n/api/v2/ecosystemname?id=..')]),e._v(" "),t("li",[e._v('id\nEcosystem ID.\nResponse example\n200 (OK)\nContent-Type: application/json\n{\n"ecosystem_name": "platform_ecosystem"\n}\nError response\nE_PARAMNOTFOUND\necosystems\nGET/ Returns the number of ecosystems.\nGET\n/api/v2/ecosystems/\nResponse')]),e._v(" "),t("li",[e._v('number\nThe number of ecosystems installed.\nResponse example\n200 (OK)\nContent-Type: application/json\n{\n"number": 100,\n}\nappparams/{appID}\nGET/ Returns a list of application parameters in the current or specified ecosystem.\nRequest\nGET\n/api/v2/appparams')]),e._v(" "),t("li",[e._v("[appid]\nApplication ID.")]),e._v(" "),t("li",[e._v("[ecosystem]\nEcosystem ID. If not specified, the parameters of the current ecosystem will be returned.")]),e._v(" "),t("li",[e._v("[names]\nList of parameters received.\nYou can specify the list of parameter names separated by commas. For example: /api/v2/appparams/1?names=name,mypar.\nResponse")]),e._v(" "),t("li",[e._v('list\nEach element in the array contains the following parameters:\n–name, parameter name;\n–value, parameter value;\n–conditions, permission to change parameters.\nResponse example\n200 (OK)\nContent-Type: application/json\n{\n"list": [{\n"name": "name",\n"value": "MyState",\n"conditions": "true",\n},\n{\n"name": "mypar",\n"value": "My value",\n"conditions": "true",\n},\n]\n}\nError response\nE_ECOSYSTEM\nappparam/{appid}/{name}\nGET/ Returns information related to the parameter {name} of the application {appid} in the current or specified ecosystem.\nRequest\nGET\n/api/v2/appparam/{appid}/{name}[?ecosystem=1]')]),e._v(" "),t("li",[e._v("appid\nApplication ID.")]),e._v(" "),t("li",[e._v("name\nName of the parameter requested.")]),e._v(" "),t("li",[e._v("[ecosystem]\nEcosystem ID (optional parameter).\nReturns the current ecosystem by default.\nResponse")]),e._v(" "),t("li",[e._v("id\nParameter ID.")]),e._v(" "),t("li",[e._v("name\nParameter name.")]),e._v(" "),t("li",[e._v("value\nParameter value.")]),e._v(" "),t("li",[e._v('conditions\nPermission to change parameters.\nResponse example\n200 (OK)\nContent-Type: application/json\n{\n"id": "10",\n"name": "par",\n"value": "My value",\n"conditions": "true"\n}\nError response\nE_ECOSYSTEM, E_PARAMNOTFOUND\necosystemparams\nGET/ Returns the list of ecosystem parameters.\nRequest\nGET\n/api/v2/ecosystemparams/[?ecosystem=...&names=...]')]),e._v(" "),t("li",[e._v("[ecosystem]\nEcosystem ID. If not specified, the current ecosystem ID will be returned.")]),e._v(" "),t("li",[e._v("[names]\nList of request parameters, separated by commas.\nFor example: /api/v2/ecosystemparams/?names=name,currency,logo*.\nResponse")]),e._v(" "),t("li",[e._v('list\nEach element in the array contains the following parameters:\n–name\nParameter name.\n–value\nParameter value.\n–conditions\nPermission to change parameters.\nResponse example\n200 (OK)\nContent-Type: application/json\n{\n"list": [{\n"name": "name",\n"value": "MyState",\n"conditions": "true",\n},\n{\n"name": "currency",\n"value": "MY",\n"conditions": "true",\n},\n]\n}\nError response\nE_ECOSYSTEM\necosystemparam/{name}\nGET/ Returns information related to the parameter {name} in the current or specified ecosystem.\nRequest\nGET\n/api/v2/ecosystemparam/{name}[?ecosystem=1]')]),e._v(" "),t("li",[e._v("name\nName of the request parameter.")]),e._v(" "),t("li",[e._v("[ecosystem]\nYou can specify the ecosystem ID. By default, the current ecosystem ID is returned.\nResponse")]),e._v(" "),t("li",[e._v("name\nParameter name.")]),e._v(" "),t("li",[e._v("value\nParameter value.")]),e._v(" "),t("li",[e._v('conditions\nPermission to change the parameters.\nResponse example\n200 (OK)\nContent-Type: application/json\n{\n"name": "currency",\n"value": "MYCUR",\n"conditions": "true"\n}\nError response\nE_ECOSYSTEM\ntables/[?limit=…&offset=…]\nGET/ Returns the list of tables of the current ecosystem, where you can set the offset and the number of entries.\nRequest')]),e._v(" "),t("li",[e._v("[limit]\nNumber of entries, 25 by default.")]),e._v(" "),t("li",[e._v("[offset]\nOffset, 0 by default.\nGET\n/api/v2/tables\nResponse")]),e._v(" "),t("li",[e._v("count\nTotal entries in the table.")]),e._v(" "),t("li",[e._v('list\nEach element in the array contains the following parameters:\n–name\nTable name without the prefix.\n–count\nNumber of entries in the table.\nResponse example\n200 (OK)\nContent-Type: application/json\n{\n"count": "100"\n"list": [{\n"name": "accounts",\n"count": "10",\n},\n{\n"name": "citizens",\n"count": "5",\n},\n]\n}\ntable/{name}\nGET/ Returns information related to the table requested by the current ecosystem.\nReturns the following field information:')]),e._v(" "),t("li",[e._v("name\nTable name.")]),e._v(" "),t("li",[e._v("insert\nPermission to add new entries.")]),e._v(" "),t("li",[e._v("new_column\nPermission to add new fields.")]),e._v(" "),t("li",[e._v("update\nPermission to change entries.")]),e._v(" "),t("li",[e._v("columns\nAn array of field related information:\n–name\nField name.\n–type\nField data type.\n–perm\nPermission to change the value of this field.\nRequest\nGET\n/api/v2/table/mytable")]),e._v(" "),t("li",[e._v("name\nTable name without the ecosystem prefix.\nResponse")]),e._v(" "),t("li",[e._v("name\nTable name without the ecosystem prefix.")]),e._v(" "),t("li",[e._v("insert\nPermission to add new entries.")]),e._v(" "),t("li",[e._v("new_column\nPermission to add new fields.")]),e._v(" "),t("li",[e._v("update\nPermission to change entries.")]),e._v(" "),t("li",[e._v("conditions\nPermission to change table configuration.")]),e._v(" "),t("li",[e._v('columns\nAn array of field related information:\n–name\nField name.\n–type\nField data type.\n–perm\nPermission to change the value of this field.\nResponse example\n200 (OK)\nContent-Type: application/json\n{\n"name": "mytable",\n"insert": "ContractConditions('),t("code",[e._v("MainCondition")]),e._v(')",\n"new_column": "ContractConditions('),t("code",[e._v("MainCondition")]),e._v(')",\n"update": "ContractConditions('),t("code",[e._v("MainCondition")]),e._v(')",\n"conditions": "ContractConditions('),t("code",[e._v("MainCondition")]),e._v(')",\n"columns": [{"name": "mynum", "type": "number", "perm":"ContractConditions('),t("code",[e._v("MainCondition")]),e._v(')" },\n{"name": "mytext", "type": "text", "perm":"ContractConditions('),t("code",[e._v("MainCondition")]),e._v(')" }\n]\n}\nError response\nE_TABLENOTFOUND\nlist/{name}[?limit=…&offset=…&columns=…]\nGET/ Returns the list of specified table entries in the current ecosystem, and where you can set the offset and the number of entries.\nRequest')]),e._v(" "),t("li",[e._v("name\nTable name.")]),e._v(" "),t("li",[e._v("[limit]\nThe number of entries, 25 by default.")]),e._v(" "),t("li",[e._v("[offset]\nOffset, 0 by default.")]),e._v(" "),t("li",[e._v("[columns]\nList of requested columns, separated by commas. If not specified, all columns will be returned. In call cases, the id column is returned.\nGET\n/api/v2/list/mytable?columns=name\nResponse")]),e._v(" "),t("li",[e._v("count\nTotal entries.")]),e._v(" "),t("li",[e._v('list\nEach element in the array contains the following parameters:\n–id\nEntry ID.\n–Sequence of requested columns.\nResponse example\n200 (OK)\nContent-Type: application/json\n{\n"count": "10"\n"list": [{\n"id": "1",\n"name": "John",\n},\n{\n"id": "2",\n"name": "Mark",\n},\n]\n}\nsections[?limit=…&offset=…&lang=]\nGET/ Returns the list of entries in table sections of the current ecosystem, and where the offset and number of entries can be set.\nIf the role_access field contains a list of roles and does not include the current role, no record will be returned. The data in the title field will be replaced by the Accept-Language language resource in the request header.\nRequest')]),e._v(" "),t("li",[e._v("[limit]\nNumber of entries, 25 by default.")]),e._v(" "),t("li",[e._v("[offset]\nOffset, 0 by default.")]),e._v(" "),t("li",[e._v("[lang]\nThis field specifies the language resources or localization code, for example: en, zh. If find no language resources specified, for example: en-US, then, search in the language resources group en.\nGET\n/api/v2/sections\nResponse")]),e._v(" "),t("li",[e._v("count\nTotal number of entries in table sections.")]),e._v(" "),t("li",[e._v('list\nEach element in the array contains the information of all columns in the table sections.\nResponse example\n200 (OK)\nContent-Type: application/json\n{\n"count": "2"\n"list": [{\n"id": "1",\n"title": "Development",\n"urlpage": "develop",\n...\n},\n]\n}\nError response\nE_TABLENOTFOUND\nrow/{name}/{id}[?columns=]\nGET/ Returns the entry of the specified table in the current ecosystem. You can specify the column(s) to be returned.\nRequest')]),e._v(" "),t("li",[e._v("name\nTable name.")]),e._v(" "),t("li",[e._v("id\nEntry ID.")]),e._v(" "),t("li",[e._v("[columns]\nList of requested columns, separated by commass. If not specified, all columns will be returned. In all cases, the id column is returned.\nGET\n/api/v2/row/mytable/10?columns=name\nResponse")]),e._v(" "),t("li",[e._v('value\nAn array of values of the requested columns\n–id\nEntry ID.\n–Sequence of requested columns.\nResponse example\n200 (OK)\nContent-Type: application/json\n{\n"values": {\n"id": "10",\n"name": "John",\n}\n}\nError response\nE_NOTFOUND\nsystemparams\nGET/ Returns the list of platform parameters.\nRequest\nGET\n/api/v2/systemparams/[?names=...]')]),e._v(" "),t("li",[e._v("[names]\nA list of request parameters, separated by commass. For example, /api/v2/systemparams/?names=max_columns,max_indexes.\nResponse")]),e._v(" "),t("li",[e._v('list\nEach element in the array contains the following parameters:\n–name\nParameter name.\n–value\nParameter value.\n–conditions\nPermissions to change the parameter.\nResponse example\n200 (OK)\nContent-Type: application/json\n{\n"list": [{\n"name": "max_columns",\n"value": "100",\n"conditions": "ContractAccess("@1UpdateSysParam")",\n},\n{\n"name": "max_indexes",\n"value": "1",\n"conditions": "ContractAccess("@1UpdateSysParam")",\n},\n]\n}\nError response\nE_PARAMNOTFOUND\nhistory/{name}/{id}\nGET/ Returns the change record of the entry in the specified table in the current ecosystem.\nRequest')]),e._v(" "),t("li",[e._v("name\nTable name.")]),e._v(" "),t("li",[e._v("id\nEntry ID.\nResponse")]),e._v(" "),t("li",[e._v('list\nEach element in an array, the elements of which contain modified parameters of the requested entry.\nResponse example\n200 (OK)\nContent-Type: application/json\n{\n"list": [\n{\n"name": "default_page",\n"value": "P(class, Default Ecosystem Page)"\n},\n{\n"menu": "default_menu"\n}\n]\n}\ninterface/{page|menu|block}/{name}\nGET/ Returns the entry of the name field in the specified table (pages, menu or blocks) of the current ecosystem.\nGET\n/api/v2/interface/page/default_page\nRequest')]),e._v(" "),t("li",[e._v("name\nName of the entry specified in the table.\nResponse")]),e._v(" "),t("li",[e._v("id\nEntry ID.")]),e._v(" "),t("li",[e._v("name\nEntry name.")]),e._v(" "),t("li",[e._v('other\nOther columns of the table.\nResponse example\n200 (OK)\nContent-Type: application/json\n{\n"id": "1",\n"name": "default_page",\n"value": "P(Page content)",\n"default_menu": "default_menu",\n"validate_count": 1\n}\nError response\nE_QUERY, E_NOTFOUND\nContract functions\ncontracts[?limit=…&offset=…]\nGET/ Returns the list of contracts in the current ecosystem, and can set the offset and number of entries.\nRequest')]),e._v(" "),t("li",[e._v("[limit]\nNumber of entries, 25 by default.")]),e._v(" "),t("li",[e._v("[offset]\nOffset, 0 by default.\nGET\n/api/v2/contracts\nResponse")]),e._v(" "),t("li",[e._v("count\nTotal number of entries.")]),e._v(" "),t("li",[e._v('list\nEach element in the array contains the following parameters:\n–id\nContract ID.\n–name\nContract name.\n–value\nContract content.\n–wallet_id\nAccount address bound to the contract.\n–address\nWallet address XXXX-...-XXXX bound to the contract.\n–ecosystem_id\nID of the ecosystem which the contract belongs.\n–app_id\nID of the application which the contract belongs.\n–conditions\nPermissions to change the contract.\n–token_id\nID of the ecosystem where the token used to pay the contract fee is located.\nResponse example\n200 (OK)\nContent-Type: application/json\n{\n"count": "10"\n"list": [{\n"id": "1",\n"name": "MainCondition",\n"token_id":"1",\n"wallet_id":"0",\n"value":"contract MainCondition {\nconditions {\nif(EcosysParam('),t("code",[e._v("founder_account")]),e._v(")!=$key_id)\n{\nwarning "),t("code",[e._v("Sorry, you dont have access to this action.")]),e._v('\n}\n}\n}",\n"address":"0000-0000-0000-0000-0000",\n"conditions":"ContractConditions('),t("code",[e._v("MainCondition")]),e._v(')"\n},\n...\n]\n}\ncontract/{name}\nGET/ Returns the relevant information of the specified contract. By default, the contract is queried in the current ecosystem.\nRequest')]),e._v(" "),t("li",[e._v("name\nContract name.\nGET\n/api/v2/contract/mycontract\nResponse")]),e._v(" "),t("li",[e._v("id\nContract ID in VM.")]),e._v(" "),t("li",[e._v("name\nContract name @1MainCondition with the ecosystem ID.")]),e._v(" "),t("li",[e._v("state\nID of the ecosystem which the contract belongs.")]),e._v(" "),t("li",[e._v("walletid\nAccount address bound to the contract.")]),e._v(" "),t("li",[e._v("tokenid\nAs the ID of the ecosystem where the token used to pay the contract fee is located.")]),e._v(" "),t("li",[e._v("address\nWallet address XXXX-...-XXXX bound to the contract.")]),e._v(" "),t("li",[e._v("tableid\nEntry ID of the contract in the contracts table.")]),e._v(" "),t("li",[e._v('fields\nThe array contains the structure information of each parameter in the data section of the contract:\n–name\nParameter name.\n–type\nParameter type.\n–optional\nParameter option, true means optional parameter, false means mandatory parameter.\nResponse example\n200 (OK)\nContent-Type: application/json\n{\n"fields" : [\n{"name":"amount", "type":"int", "optional": false},\n{"name":"name", "type":"string", "optional": true}\n],\n"id": 150,\n"name": "@1mycontract",\n"tableid" : 10,\n}\nError response\nE_CONTRACT\nsendTX\nPOST/ Receive the transaction in the parameter and add it to the transaction queue. If the request is executed successfully, the transaction hash is returned. With the hash, you can obtain the corresponding transaction in the block. When an error response occurs, the hash is included in the error text message.\nRequest\n*tx_key\nTransaction content. You can specify any name and supports receiving multiple transactions with this parameter.\nPOST\n/api/v2/sendTx\nHeaders:\nContent-Type: multipart/form-data\nParameters:\ntx1 - transaction 1\ntxN - transaction N\nResponse')]),e._v(" "),t("li",[e._v('hashes\nArray of transaction hashes:\n–tx1\nHash of transaction 1.\n–txN\nHash of transaction N.\nResponse example\n200 (OK)\nContent-Type: application/json\n{\n"hashes": {\n"tx1": "67afbc435634.....",\n"txN": "89ce4498eaf7.....",\n}\nError response\nE_LIMITTXSIZE,'),t("em",[e._v("E_BANNED")]),e._v("\ntxstatus\nPOST/ Returns the block ID and error message of the specified transaction hash. If the return value of the block ID and error text message is empty, the transaction has not been included in the block.\nRequest")]),e._v(" "),t("li",[e._v('data\nJSON list of transaction hashes.\n{"hashes":["contract1hash", "contract2hash", "contract3hash"]}\nPOST\n/api/v2/txstatus/\nResponse')]),e._v(" "),t("li",[e._v('results\nIn the data dictionary, transaction hash as the key, while the transaction detail as the value.\nhash\nTransaction hash.\n–blockid\nIf the transaction is executed successfully, the block ID is returned; if failed to execute the transaction, the blockid is 0.\n–result\nReturn the transaction result through the $result variable.\n–errmsg\nIf failed to execute the transaction, an error text message will be returned.\nResponse example\n200 (OK)\nContent-Type: application/json\n{"results":\n{\n"hash1": {\n"blockid": "3123",\n"result": "",\n},\n"hash2": {\n"blockid": "3124",\n"result": "",\n}\n}\n}\nError response\nE_HASHWRONG, E_HASHNOTFOUND\ntxinfo/{hash}\nGET/ Returns the information of the specified hash correlating to the transaction, including the block ID and the number of confirmations. If optional parameters are specified, the contract name and related parameters can also be returned.\nRequest')]),e._v(" "),t("li",[e._v("hash\nTransaction hash.")]),e._v(" "),t("li",[e._v("[contractinfo]\nDetailed contract parameter identifier. To obtain contract details correlating to the transaction, specify contractinfo=1.\nGET\n/api/v2/txinfo/c7ef367b494c7ce855f09aa3f1f2af7402535ea627fa615ebd63d437db5d0c8a?contractinfo=1\nResponse")]),e._v(" "),t("li",[e._v("blockid\nContains the block ID of the transaction. If the value is 0, no transaction with this hash can be found.")]),e._v(" "),t("li",[e._v("confirm\nNumber of confirmations of the block blockid.")]),e._v(" "),t("li",[e._v('data\nIf contentinfo=1 is specified, the contract details will be returned to this parameter.\nResponse example\n200 (OK)\nContent-Type: application/json\n{\n"blockid": "9",\n"confirm": 11,\n"data": {\n"block": "9",\n"contract": "@1NewContract",\n"params": {\n"ApplicationId": 1,\n"Conditions": "true",\n"Value": "contract crashci4b {\\n\\t\\t\\tdata {}\\n\\t\\t}"\n}\n}\n}\nError response\nE_HASHWRONG\ntxinfoMultiple/\nGET/ Returns the information of the specified hash correlating to a transaction.\nRequest')]),e._v(" "),t("li",[e._v("hash\nList of transaction hashes.")]),e._v(" "),t("li",[e._v('[contractinfo]\nDetailed contract parameter identifier. To obtain contract details related to the transaction, specify contractinfo=1.\n{"hashes":["contract1hash", "contract2hash", "contract3hash"]}\nGET\n/api/v2/txinfoMultiple/\nResponse')]),e._v(" "),t("li",[e._v('results\nIn the data dictionary, transaction hashes as the key and transaction details as the value.\nhash\nTransaction hash.\nblockid\nBlock ID containing the transaction. If the value is 0, no transaction with this hash can be found.\nconfirm\nNumber of confirmations of the block blockid.\ndata\nIf contentinfo=1 is specified, the contract details will be return to this parameter.\nResponse example\n200 (OK)\nContent-Type: application/json\n{"results":\n{\n"hash1": {\n"blockid": "3123",\n"confirm": "5",\n},\n"hash2": {\n"blockid": "3124",\n"confirm": "3",\n}\n}\n}\nError response\nE_HASHWRONG\n/page/validators_count/{name}\nGET/ Returns the number of nodes required to verify the specified page.\nRequest')]),e._v(" "),t("li",[e._v("name\nPage name with ecosystem ID in a format: @ecosystem_id%%page_name%. For example @1main_page.\nGET\n/api/v2/page/validators_count/@1page_name\nResponse")]),e._v(" "),t("li",[e._v('validate_count\nNumber of nodes required to verify the specified page\nResponse example\n200 (OK)\nContent-Type: application/json\n{"validate_count":1}\nError response\nE_NOTFOUND, E_SERVER\ncontent/menu|page/{name}\nPOST/ Returns the JSON object tree of the code of specified page or menu name, which is the result of the template engine processing.\nRequest')]),e._v(" "),t("li",[e._v("name\nPage or menu name.\nPOST\n/api/v2/content/page/default\nResponse")]),e._v(" "),t("li",[e._v("menu\nMenu name of the page when requesting content/page/…")]),e._v(" "),t("li",[e._v("menutree\nA JSON object tree of the page menu when requesting content/page/…")]),e._v(" "),t("li",[e._v("title–head for the menu content/menu/…\nMenu name when requesting content/menu/...")]),e._v(" "),t("li",[e._v('tree\nA JSON object tree of a page or menu.\nResponse example\n200 (OK)\nContent-Type: application/json\n{\n"tree": {"type":"......",\n"children": [\n{...},\n{...}\n]\n},\n}\nError response\nE_NOTFOUND\ncontent/source/{name}\nPOST/ Returns the JSON object tree of the specified page name code. Does not execute any function or receive any data. The returned JSON object tree corresponds to the page template and can be used in the visual page designer. If the page cannot be found, a 404 error is returned. Request """""""')]),e._v(" "),t("li",[e._v("name\nPage name.\nResponse\nPOST\n/api/v2/content/source/default")]),e._v(" "),t("li",[e._v('tree\nA JSON object tree of the page.\nResponse example\n200 (OK)\nContent-Type: application/json\n{\n"tree": {"type":"......",\n"children": [\n{...},\n{...}\n]\n},\n}\nError response\nE_NOTFOUND, E_SERVER\ncontent/hash/{name}\nPOST/ Returns the SHA256 hash of the page name specified , or 404 error if the page cannot be found.\nLogin authorization is not required for this request. To receive the correct hash when making a request to other nodes, you must also pass the ecosystem, keyID, roleID, isMobile parameters. To receive pages from other ecosystems, the ecosystem ID must be prefixed to the page name. For example: @2mypage.\nRequest')]),e._v(" "),t("li",[e._v("name\nPage name with the ecosystem ID.")]),e._v(" "),t("li",[e._v("ecosystem\nEcosystem ID.")]),e._v(" "),t("li",[e._v("keyID\nAccount address.")]),e._v(" "),t("li",[e._v("roleID\nRole ID.")]),e._v(" "),t("li",[e._v("isMobile\nParameter identifier of the mobile platform.\nPOST\n/api/v2/content/hash/default\nResponse")]),e._v(" "),t("li",[e._v('hex\nHexadecimal hash.\nResponse example\n200 (OK)\nContent-Type: application/json\n{\n"hash": "b631b8c28761b5bf03c2cfbc2b49e4b6ade5a1c7e2f5b72a6323e50eae2a33c6"\n}\nError response\nE_NOTFOUND, E_SERVER, E_HEAVYPAGE\ncontent\nPOST/ The number of JSON objects that return the page code from the template parameter. If the optional parameter source is specified as true or 1, the JSON object tree does not execute any function and data received. The JSON object tree can be used in the visual page designer.\nLogin authorization is not required for this request.\nRequest')]),e._v(" "),t("li",[e._v("template\nThe page code.")]),e._v(" "),t("li",[e._v("[source]\nIf specified as true or 1, the JSON object tree does not execute any function and data received.\nPOST\n/api/v2/content\nResponse")]),e._v(" "),t("li",[e._v('tree\nJSON object tree.\nResponse example\n200 (OK)\nContent-Type: application/json\n{\n"tree": {"type":"......",\n"children": [\n{...},\n{...}\n]\n},\n}\nError response\nE_NOTFOUND, E_SERVER\nmaxblockid\nGET/ Returns the ID of the highest block on the current node.\nLogin authorization is not required for this request.\nRequest\nGET\n/api/v2/maxblockid\nResponse')]),e._v(" "),t("li",[e._v('max_block_id\nID of the highest block on the current node.\nResponse example\n200 (OK)\nContent-Type: application/json\n{\n"max_block_id" : 341,\n}\nError response\nE_NOTFOUND\nblock/{id}\nGET/ Returns relevant information of the block with the ID specified.\nLogin authorization is not required for this request.\nRequest')]),e._v(" "),t("li",[e._v("id\nBlock ID.\nPOST\n/api/v2/block/32\nResponse")]),e._v(" "),t("li",[e._v("hash\nHash of the block.")]),e._v(" "),t("li",[e._v("key_id\nAddress of the account that signed the block.")]),e._v(" "),t("li",[e._v("time\nBlock generation timestamp.")]),e._v(" "),t("li",[e._v("tx_count\nTotal number of transactions in the block.")]),e._v(" "),t("li",[e._v("rollbacks_hash\nHash for block rollback.")]),e._v(" "),t("li",[e._v('node_position\nPosition of the block in the list of honor nodes.\nResponse example\n200 (OK)\nContent-Type: application/json\n{\n"hash": "1x4S5s/zNUTopP2YK43SppEyvT2O4DW5OHSpQfp5Tek=",\n"key_id": -118432674655542910,\n"time": 1551145365,\n"tx_count": 3,\n"rollbacks_hash": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",\n"node_position": 0,\n}\nError response\nE_NOTFOUND\navatar/{ecosystem}/{member}\nGET/ Returns the avatar of the user in the member table (you can use it without logging in).\nRequest')]),e._v(" "),t("li",[e._v("ecosystem\nEcosystem ID.")]),e._v(" "),t("li",[e._v("member\nAccount address of the user.\nGET\n/api/v2/avatar/1/-118432674655542910\nResponse\nThe type of the request header Content-Type is image, and the image data is returned in the response body.\nResponse example\n200 (OK)\nContent-Type: image/png\nError response\nE_NOTFOUND E_SERVER\nconfig/centrifugo\nGET/ Returns the host address and port of centrifugo.\nLogin authorization is not required for this request.\nRequest\nGET\n/api/v2/config/centrifugo\nResponse\nThe response format is http://address:port, for example: http://127.0.0.1:8100.\nError response\nE_SERVER\nupdnotificator\nPOST/ Send all messages that have not yet been sent to the centrifugo notification service. Only send messages for ecosystems and members specified.\nLogin authorization is not required for this request.\nRequest")]),e._v(" "),t("li",[e._v("id\nMember account address.")]),e._v(" "),t("li",[e._v('ecosystem\nEcosystem ID.\nPOST\n/api/v2/updnotificator\nResponse example\n200 (OK)\nContent-Type: application/json\n{\n"result": true\n}')])])])}),[],!1,null,null,null);n.default=o.exports}}]);